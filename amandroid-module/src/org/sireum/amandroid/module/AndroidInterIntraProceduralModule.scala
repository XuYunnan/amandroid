// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.AndroidInterIntraProcedural
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.alir.DefRef
import org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables
import org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult
import org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Function1
import scala.Function2
import scala.Option
import scala.collection.mutable.Map

object AndroidInterIntraProceduralModule extends PipelineModule {
  def title = "Android InterIntraProcedural Module"
  def origin = classOf[AndroidInterIntraProcedural]

  val globalParallelKey = "Global.parallel"
  val globalInterResultKey = "Global.interResult"
  val globalAPIpermOptKey = "Global.APIpermOpt"
  val globalAndroidCacheKey = "Global.androidCache"
  val globalIsInputOutputParamPredicateKey = "Global.isInputOutputParamPredicate"
  val globalShouldIncludeFlowFunctionKey = "Global.shouldIncludeFlowFunction"
  val globalShouldBuildCfgKey = "Global.shouldBuildCfg"
  val globalShouldBuildSCfgKey = "Global.shouldBuildSCfg"
  val globalSymbolTableKey = "Global.symbolTable"
  val globalShouldBuildCCfgKey = "Global.shouldBuildCCfg"
  val globalShouldBuildOFAsCfgKey = "Global.shouldBuildOFAsCfg"
  val globalShouldBuildCSCfgKey = "Global.shouldBuildCSCfg"
  val globalShouldBuildRdaKey = "Global.shouldBuildRda"
  val globalAndroidVirtualMethodTablesKey = "Global.androidVirtualMethodTables"
  val globalProcedureAbsUriIteratorKey = "Global.procedureAbsUriIterator"
  val globalIntraResultKey = "Global.intraResult"
  val globalSwitchAsOrderedMatchKey = "Global.switchAsOrderedMatch"
  val globalDefRefKey = "Global.defRef"
  val globalShouldPreprocessOfgKey = "Global.shouldPreprocessOfg"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProceduralModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if(!(job ? AndroidInterIntraProceduralModule.globalAndroidCacheKey)) {
      val androidCache = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$5").invoke(null).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
      setAndroidCache(job.propertyMap, androidCache)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldBuildCfgKey)) {
      val shouldBuildCfg = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$6").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildCfg(job.propertyMap, shouldBuildCfg)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldBuildRdaKey)) {
      val shouldBuildRda = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$7").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildRda(job.propertyMap, shouldBuildRda)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldPreprocessOfgKey)) {
      val shouldPreprocessOfg = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$8").invoke(null).asInstanceOf[scala.Boolean]
      setShouldPreprocessOfg(job.propertyMap, shouldPreprocessOfg)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey)) {
      val shouldBuildCCfg = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$9").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildCCfg(job.propertyMap, shouldBuildCCfg)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey)) {
      val shouldBuildOFAsCfg = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$10").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildOFAsCfg(job.propertyMap, shouldBuildOFAsCfg)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey)) {
      val shouldBuildSCfg = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$11").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildSCfg(job.propertyMap, shouldBuildSCfg)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey)) {
      val shouldBuildCSCfg = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$12").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildCSCfg(job.propertyMap, shouldBuildCSCfg)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalAPIpermOptKey)) {
      val APIpermOpt = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$13").invoke(null).asInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]
      setAPIpermOpt(job.propertyMap, APIpermOpt)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey)) {
      val shouldIncludeFlowFunction = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$14").invoke(null).asInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]
      setShouldIncludeFlowFunction(job.propertyMap, shouldIncludeFlowFunction)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalDefRefKey)) {
      val defRef = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$15").invoke(null).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]
      setDefRef(job.propertyMap, defRef)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalIsInputOutputParamPredicateKey)) {
      val isInputOutputParamPredicate = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$16").invoke(null).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]
      setIsInputOutputParamPredicate(job.propertyMap, isInputOutputParamPredicate)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalSwitchAsOrderedMatchKey)) {
      val switchAsOrderedMatch = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$17").invoke(null).asInstanceOf[scala.Boolean]
      setSwitchAsOrderedMatch(job.propertyMap, switchAsOrderedMatch)
    }

    if(!(job ? AndroidInterIntraProceduralModule.globalProcedureAbsUriIteratorKey)) {
      val procedureAbsUriIterator = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$18").invoke(null).asInstanceOf[scala.Option[scala.collection.Iterator[java.lang.String]]]
      setProcedureAbsUriIterator(job.propertyMap, procedureAbsUriIterator)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _parallel : scala.Option[AnyRef] = None
    var _parallelKey : scala.Option[String] = None

    val keylistparallel = List(AndroidInterIntraProceduralModule.globalParallelKey)
    keylistparallel.foreach(key => 
      if(job ? key) { 
        if(_parallel.isEmpty) {
          _parallel = Some(job(key))
          _parallelKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _parallel.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'parallel' keys '" + _parallelKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _parallel match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'parallel'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'parallel'")       
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(AndroidInterIntraProceduralModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key => 
      if(job ? key) { 
        if(_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.pilar.symbol.SymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.pilar.symbol.SymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")       
    }
    var _androidVirtualMethodTables : scala.Option[AnyRef] = None
    var _androidVirtualMethodTablesKey : scala.Option[String] = None

    val keylistandroidVirtualMethodTables = List(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey)
    keylistandroidVirtualMethodTables.foreach(key => 
      if(job ? key) { 
        if(_androidVirtualMethodTables.isEmpty) {
          _androidVirtualMethodTables = Some(job(key))
          _androidVirtualMethodTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidVirtualMethodTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidVirtualMethodTables' keys '" + _androidVirtualMethodTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidVirtualMethodTables match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidVirtualMethodTables'.  Expecting 'org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidVirtualMethodTables'")       
    }
    var _androidCache : scala.Option[AnyRef] = None
    var _androidCacheKey : scala.Option[String] = None

    val keylistandroidCache = List(AndroidInterIntraProceduralModule.globalAndroidCacheKey)
    keylistandroidCache.foreach(key => 
      if(job ? key) { 
        if(_androidCache.isEmpty) {
          _androidCache = Some(job(key))
          _androidCacheKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidCache.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidCache' keys '" + _androidCacheKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidCache match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidCache'.  Expecting 'scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidCache'")       
    }
    var _shouldBuildCfg : scala.Option[AnyRef] = None
    var _shouldBuildCfgKey : scala.Option[String] = None

    val keylistshouldBuildCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildCfgKey)
    keylistshouldBuildCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildCfg.isEmpty) {
          _shouldBuildCfg = Some(job(key))
          _shouldBuildCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCfg' keys '" + _shouldBuildCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCfg'")       
    }
    var _shouldBuildRda : scala.Option[AnyRef] = None
    var _shouldBuildRdaKey : scala.Option[String] = None

    val keylistshouldBuildRda = List(AndroidInterIntraProceduralModule.globalShouldBuildRdaKey)
    keylistshouldBuildRda.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildRda.isEmpty) {
          _shouldBuildRda = Some(job(key))
          _shouldBuildRdaKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildRda.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildRda' keys '" + _shouldBuildRdaKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildRda match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildRda'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildRda'")       
    }
    var _shouldPreprocessOfg : scala.Option[AnyRef] = None
    var _shouldPreprocessOfgKey : scala.Option[String] = None

    val keylistshouldPreprocessOfg = List(AndroidInterIntraProceduralModule.globalShouldPreprocessOfgKey)
    keylistshouldPreprocessOfg.foreach(key => 
      if(job ? key) { 
        if(_shouldPreprocessOfg.isEmpty) {
          _shouldPreprocessOfg = Some(job(key))
          _shouldPreprocessOfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldPreprocessOfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldPreprocessOfg' keys '" + _shouldPreprocessOfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldPreprocessOfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldPreprocessOfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldPreprocessOfg'")       
    }
    var _shouldBuildCCfg : scala.Option[AnyRef] = None
    var _shouldBuildCCfgKey : scala.Option[String] = None

    val keylistshouldBuildCCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey)
    keylistshouldBuildCCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildCCfg.isEmpty) {
          _shouldBuildCCfg = Some(job(key))
          _shouldBuildCCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCCfg' keys '" + _shouldBuildCCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCCfg'")       
    }
    var _shouldBuildOFAsCfg : scala.Option[AnyRef] = None
    var _shouldBuildOFAsCfgKey : scala.Option[String] = None

    val keylistshouldBuildOFAsCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey)
    keylistshouldBuildOFAsCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildOFAsCfg.isEmpty) {
          _shouldBuildOFAsCfg = Some(job(key))
          _shouldBuildOFAsCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildOFAsCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildOFAsCfg' keys '" + _shouldBuildOFAsCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildOFAsCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildOFAsCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildOFAsCfg'")       
    }
    var _shouldBuildSCfg : scala.Option[AnyRef] = None
    var _shouldBuildSCfgKey : scala.Option[String] = None

    val keylistshouldBuildSCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey)
    keylistshouldBuildSCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildSCfg.isEmpty) {
          _shouldBuildSCfg = Some(job(key))
          _shouldBuildSCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildSCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildSCfg' keys '" + _shouldBuildSCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildSCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildSCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildSCfg'")       
    }
    var _shouldBuildCSCfg : scala.Option[AnyRef] = None
    var _shouldBuildCSCfgKey : scala.Option[String] = None

    val keylistshouldBuildCSCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey)
    keylistshouldBuildCSCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildCSCfg.isEmpty) {
          _shouldBuildCSCfg = Some(job(key))
          _shouldBuildCSCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCSCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCSCfg' keys '" + _shouldBuildCSCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCSCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCSCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCSCfg'")       
    }
    var _APIpermOpt : scala.Option[AnyRef] = None
    var _APIpermOptKey : scala.Option[String] = None

    val keylistAPIpermOpt = List(AndroidInterIntraProceduralModule.globalAPIpermOptKey)
    keylistAPIpermOpt.foreach(key => 
      if(job ? key) { 
        if(_APIpermOpt.isEmpty) {
          _APIpermOpt = Some(job(key))
          _APIpermOptKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _APIpermOpt.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'APIpermOpt' keys '" + _APIpermOptKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _APIpermOpt match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'APIpermOpt'.  Expecting 'scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'APIpermOpt'")       
    }
    var _shouldIncludeFlowFunction : scala.Option[AnyRef] = None
    var _shouldIncludeFlowFunctionKey : scala.Option[String] = None

    val keylistshouldIncludeFlowFunction = List(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey)
    keylistshouldIncludeFlowFunction.foreach(key => 
      if(job ? key) { 
        if(_shouldIncludeFlowFunction.isEmpty) {
          _shouldIncludeFlowFunction = Some(job(key))
          _shouldIncludeFlowFunctionKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldIncludeFlowFunction.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldIncludeFlowFunction' keys '" + _shouldIncludeFlowFunctionKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldIncludeFlowFunction match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldIncludeFlowFunction'.  Expecting 'scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldIncludeFlowFunction'")       
    }
    var _defRef : scala.Option[AnyRef] = None
    var _defRefKey : scala.Option[String] = None

    val keylistdefRef = List(AndroidInterIntraProceduralModule.globalDefRefKey)
    keylistdefRef.foreach(key => 
      if(job ? key) { 
        if(_defRef.isEmpty) {
          _defRef = Some(job(key))
          _defRefKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _defRef.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'defRef' keys '" + _defRefKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _defRef match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'defRef'.  Expecting 'scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'defRef'")       
    }
    var _isInputOutputParamPredicate : scala.Option[AnyRef] = None
    var _isInputOutputParamPredicateKey : scala.Option[String] = None

    val keylistisInputOutputParamPredicate = List(AndroidInterIntraProceduralModule.globalIsInputOutputParamPredicateKey)
    keylistisInputOutputParamPredicate.foreach(key => 
      if(job ? key) { 
        if(_isInputOutputParamPredicate.isEmpty) {
          _isInputOutputParamPredicate = Some(job(key))
          _isInputOutputParamPredicateKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _isInputOutputParamPredicate.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'isInputOutputParamPredicate' keys '" + _isInputOutputParamPredicateKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _isInputOutputParamPredicate match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'isInputOutputParamPredicate'.  Expecting 'scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'isInputOutputParamPredicate'")       
    }
    var _switchAsOrderedMatch : scala.Option[AnyRef] = None
    var _switchAsOrderedMatchKey : scala.Option[String] = None

    val keylistswitchAsOrderedMatch = List(AndroidInterIntraProceduralModule.globalSwitchAsOrderedMatchKey)
    keylistswitchAsOrderedMatch.foreach(key => 
      if(job ? key) { 
        if(_switchAsOrderedMatch.isEmpty) {
          _switchAsOrderedMatch = Some(job(key))
          _switchAsOrderedMatchKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _switchAsOrderedMatch.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'switchAsOrderedMatch' keys '" + _switchAsOrderedMatchKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _switchAsOrderedMatch match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'switchAsOrderedMatch'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'switchAsOrderedMatch'")       
    }
    var _procedureAbsUriIterator : scala.Option[AnyRef] = None
    var _procedureAbsUriIteratorKey : scala.Option[String] = None

    val keylistprocedureAbsUriIterator = List(AndroidInterIntraProceduralModule.globalProcedureAbsUriIteratorKey)
    keylistprocedureAbsUriIterator.foreach(key => 
      if(job ? key) { 
        if(_procedureAbsUriIterator.isEmpty) {
          _procedureAbsUriIterator = Some(job(key))
          _procedureAbsUriIteratorKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _procedureAbsUriIterator.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'procedureAbsUriIterator' keys '" + _procedureAbsUriIteratorKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _procedureAbsUriIterator match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[scala.collection.Iterator[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'procedureAbsUriIterator'.  Expecting 'scala.Option[scala.collection.Iterator[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'procedureAbsUriIterator'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? AndroidInterIntraProceduralModule.globalIntraResultKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'intraResult'. Expecting (AndroidInterIntraProceduralModule.globalIntraResultKey)") 
    }

    if(job ? AndroidInterIntraProceduralModule.globalIntraResultKey && !job(AndroidInterIntraProceduralModule.globalIntraResultKey).isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidInterIntraProceduralModule.globalIntraResultKey.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult]' but found '" + 
        job(AndroidInterIntraProceduralModule.globalIntraResultKey).getClass.toString + "'")
    } 

    if(!(job ? AndroidInterIntraProceduralModule.globalInterResultKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'interResult'. Expecting (AndroidInterIntraProceduralModule.globalInterResultKey)") 
    }

    if(job ? AndroidInterIntraProceduralModule.globalInterResultKey && !job(AndroidInterIntraProceduralModule.globalInterResultKey).isInstanceOf[org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidInterIntraProceduralModule.globalInterResultKey.  Expecting 'org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult' but found '" + 
        job(AndroidInterIntraProceduralModule.globalInterResultKey).getClass.toString + "'")
    } 
    return tags
  }

  def getParallel (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalParallelKey)) {
       return options(AndroidInterIntraProceduralModule.globalParallelKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setParallel (options : MMap[Property.Key, Any], parallel : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalParallelKey) = parallel

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.SymbolTable = {
    if (options.contains(AndroidInterIntraProceduralModule.globalSymbolTableKey)) {
       return options(AndroidInterIntraProceduralModule.globalSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.SymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.pilar.symbol.SymbolTable) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getAndroidVirtualMethodTables (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = {
    if (options.contains(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey)) {
       return options(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey).asInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidVirtualMethodTables (options : MMap[Property.Key, Any], androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey) = androidVirtualMethodTables

    return options
  }

  def getAndroidCache (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalAndroidCacheKey)) {
       return options(AndroidInterIntraProceduralModule.globalAndroidCacheKey).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidCache (options : MMap[Property.Key, Any], androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalAndroidCacheKey) = androidCache

    return options
  }

  def getShouldBuildCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCfg (options : MMap[Property.Key, Any], shouldBuildCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildCfgKey) = shouldBuildCfg

    return options
  }

  def getShouldBuildRda (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildRdaKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildRdaKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildRda (options : MMap[Property.Key, Any], shouldBuildRda : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildRdaKey) = shouldBuildRda

    return options
  }

  def getShouldPreprocessOfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldPreprocessOfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldPreprocessOfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldPreprocessOfg (options : MMap[Property.Key, Any], shouldPreprocessOfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldPreprocessOfgKey) = shouldPreprocessOfg

    return options
  }

  def getShouldBuildCCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCCfg (options : MMap[Property.Key, Any], shouldBuildCCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey) = shouldBuildCCfg

    return options
  }

  def getShouldBuildOFAsCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildOFAsCfg (options : MMap[Property.Key, Any], shouldBuildOFAsCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey) = shouldBuildOFAsCfg

    return options
  }

  def getShouldBuildSCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildSCfg (options : MMap[Property.Key, Any], shouldBuildSCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey) = shouldBuildSCfg

    return options
  }

  def getShouldBuildCSCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCSCfg (options : MMap[Property.Key, Any], shouldBuildCSCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey) = shouldBuildCSCfg

    return options
  }

  def getAPIpermOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalAPIpermOptKey)) {
       return options(AndroidInterIntraProceduralModule.globalAPIpermOptKey).asInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAPIpermOpt (options : MMap[Property.Key, Any], APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalAPIpermOptKey) = APIpermOpt

    return options
  }

  def getShouldIncludeFlowFunction (options : scala.collection.Map[Property.Key, Any]) : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey).asInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldIncludeFlowFunction (options : MMap[Property.Key, Any], shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey) = shouldIncludeFlowFunction

    return options
  }

  def getDefRef (options : scala.collection.Map[Property.Key, Any]) : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalDefRefKey)) {
       return options(AndroidInterIntraProceduralModule.globalDefRefKey).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setDefRef (options : MMap[Property.Key, Any], defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalDefRefKey) = defRef

    return options
  }

  def getIsInputOutputParamPredicate (options : scala.collection.Map[Property.Key, Any]) : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalIsInputOutputParamPredicateKey)) {
       return options(AndroidInterIntraProceduralModule.globalIsInputOutputParamPredicateKey).asInstanceOf[scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIsInputOutputParamPredicate (options : MMap[Property.Key, Any], isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalIsInputOutputParamPredicateKey) = isInputOutputParamPredicate

    return options
  }

  def getSwitchAsOrderedMatch (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalSwitchAsOrderedMatchKey)) {
       return options(AndroidInterIntraProceduralModule.globalSwitchAsOrderedMatchKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSwitchAsOrderedMatch (options : MMap[Property.Key, Any], switchAsOrderedMatch : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalSwitchAsOrderedMatchKey) = switchAsOrderedMatch

    return options
  }

  def getProcedureAbsUriIterator (options : scala.collection.Map[Property.Key, Any]) : scala.Option[scala.collection.Iterator[java.lang.String]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalProcedureAbsUriIteratorKey)) {
       return options(AndroidInterIntraProceduralModule.globalProcedureAbsUriIteratorKey).asInstanceOf[scala.Option[scala.collection.Iterator[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureAbsUriIterator (options : MMap[Property.Key, Any], procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalProcedureAbsUriIteratorKey) = procedureAbsUriIterator

    return options
  }

  def getIntraResult (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalIntraResultKey)) {
       return options(AndroidInterIntraProceduralModule.globalIntraResultKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIntraResult (options : MMap[Property.Key, Any], intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalIntraResultKey) = intraResult

    return options
  }

  def getInterResult (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult = {
    if (options.contains(AndroidInterIntraProceduralModule.globalInterResultKey)) {
       return options(AndroidInterIntraProceduralModule.globalInterResultKey).asInstanceOf[org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setInterResult (options : MMap[Property.Key, Any], interResult : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalInterResultKey) = interResult

    return options
  }

  object ConsumerView {
    implicit class AndroidInterIntraProceduralModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def parallel : scala.Boolean = AndroidInterIntraProceduralModule.getParallel(job.propertyMap)
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterIntraProceduralModule.getSymbolTable(job.propertyMap)
      def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = AndroidInterIntraProceduralModule.getAndroidVirtualMethodTables(job.propertyMap)
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = AndroidInterIntraProceduralModule.getAndroidCache(job.propertyMap)
      def shouldBuildCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCfg(job.propertyMap)
      def shouldBuildRda : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildRda(job.propertyMap)
      def shouldPreprocessOfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldPreprocessOfg(job.propertyMap)
      def shouldBuildCCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCCfg(job.propertyMap)
      def shouldBuildOFAsCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)
      def shouldBuildSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildSCfg(job.propertyMap)
      def shouldBuildCSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCSCfg(job.propertyMap)
      def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterIntraProceduralModule.getAPIpermOpt(job.propertyMap)
      def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AndroidInterIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)
      def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = AndroidInterIntraProceduralModule.getDefRef(job.propertyMap)
      def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = AndroidInterIntraProceduralModule.getIsInputOutputParamPredicate(job.propertyMap)
      def switchAsOrderedMatch : scala.Boolean = AndroidInterIntraProceduralModule.getSwitchAsOrderedMatch(job.propertyMap)
      def procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]] = AndroidInterIntraProceduralModule.getProcedureAbsUriIterator(job.propertyMap)
      def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult] = AndroidInterIntraProceduralModule.getIntraResult(job.propertyMap)
      def interResult : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult = AndroidInterIntraProceduralModule.getInterResult(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class AndroidInterIntraProceduralModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def parallel_=(parallel : scala.Boolean) { AndroidInterIntraProceduralModule.setParallel(job.propertyMap, parallel) }
      def parallel : scala.Boolean = AndroidInterIntraProceduralModule.getParallel(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { AndroidInterIntraProceduralModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterIntraProceduralModule.getSymbolTable(job.propertyMap)

      def androidVirtualMethodTables_=(androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables) { AndroidInterIntraProceduralModule.setAndroidVirtualMethodTables(job.propertyMap, androidVirtualMethodTables) }
      def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = AndroidInterIntraProceduralModule.getAndroidVirtualMethodTables(job.propertyMap)

      def androidCache_=(androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) { AndroidInterIntraProceduralModule.setAndroidCache(job.propertyMap, androidCache) }
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = AndroidInterIntraProceduralModule.getAndroidCache(job.propertyMap)

      def shouldBuildCfg_=(shouldBuildCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildCfg(job.propertyMap, shouldBuildCfg) }
      def shouldBuildCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCfg(job.propertyMap)

      def shouldBuildRda_=(shouldBuildRda : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildRda(job.propertyMap, shouldBuildRda) }
      def shouldBuildRda : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildRda(job.propertyMap)

      def shouldPreprocessOfg_=(shouldPreprocessOfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldPreprocessOfg(job.propertyMap, shouldPreprocessOfg) }
      def shouldPreprocessOfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldPreprocessOfg(job.propertyMap)

      def shouldBuildCCfg_=(shouldBuildCCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildCCfg(job.propertyMap, shouldBuildCCfg) }
      def shouldBuildCCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCCfg(job.propertyMap)

      def shouldBuildOFAsCfg_=(shouldBuildOFAsCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildOFAsCfg(job.propertyMap, shouldBuildOFAsCfg) }
      def shouldBuildOFAsCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)

      def shouldBuildSCfg_=(shouldBuildSCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildSCfg(job.propertyMap, shouldBuildSCfg) }
      def shouldBuildSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildSCfg(job.propertyMap)

      def shouldBuildCSCfg_=(shouldBuildCSCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildCSCfg(job.propertyMap, shouldBuildCSCfg) }
      def shouldBuildCSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCSCfg(job.propertyMap)

      def APIpermOpt_=(APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]) { AndroidInterIntraProceduralModule.setAPIpermOpt(job.propertyMap, APIpermOpt) }
      def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterIntraProceduralModule.getAPIpermOpt(job.propertyMap)

      def shouldIncludeFlowFunction_=(shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]) { AndroidInterIntraProceduralModule.setShouldIncludeFlowFunction(job.propertyMap, shouldIncludeFlowFunction) }
      def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AndroidInterIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)

      def defRef_=(defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef]) { AndroidInterIntraProceduralModule.setDefRef(job.propertyMap, defRef) }
      def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = AndroidInterIntraProceduralModule.getDefRef(job.propertyMap)

      def isInputOutputParamPredicate_=(isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]]) { AndroidInterIntraProceduralModule.setIsInputOutputParamPredicate(job.propertyMap, isInputOutputParamPredicate) }
      def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = AndroidInterIntraProceduralModule.getIsInputOutputParamPredicate(job.propertyMap)

      def switchAsOrderedMatch_=(switchAsOrderedMatch : scala.Boolean) { AndroidInterIntraProceduralModule.setSwitchAsOrderedMatch(job.propertyMap, switchAsOrderedMatch) }
      def switchAsOrderedMatch : scala.Boolean = AndroidInterIntraProceduralModule.getSwitchAsOrderedMatch(job.propertyMap)

      def procedureAbsUriIterator_=(procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]]) { AndroidInterIntraProceduralModule.setProcedureAbsUriIterator(job.propertyMap, procedureAbsUriIterator) }
      def procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]] = AndroidInterIntraProceduralModule.getProcedureAbsUriIterator(job.propertyMap)

      def intraResult_=(intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult]) { AndroidInterIntraProceduralModule.setIntraResult(job.propertyMap, intraResult) }
      def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult] = AndroidInterIntraProceduralModule.getIntraResult(job.propertyMap)

      def interResult_=(interResult : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult) { AndroidInterIntraProceduralModule.setInterResult(job.propertyMap, interResult) }
      def interResult : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult = AndroidInterIntraProceduralModule.getInterResult(job.propertyMap)
    }
  }
}

trait AndroidInterIntraProceduralModule {
  def job : PipelineJob

  def parallel : scala.Boolean = AndroidInterIntraProceduralModule.getParallel(job.propertyMap)

  def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterIntraProceduralModule.getSymbolTable(job.propertyMap)

  def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = AndroidInterIntraProceduralModule.getAndroidVirtualMethodTables(job.propertyMap)

  def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = AndroidInterIntraProceduralModule.getAndroidCache(job.propertyMap)

  def shouldBuildCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCfg(job.propertyMap)

  def shouldBuildRda : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildRda(job.propertyMap)

  def shouldPreprocessOfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldPreprocessOfg(job.propertyMap)

  def shouldBuildCCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCCfg(job.propertyMap)

  def shouldBuildOFAsCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)

  def shouldBuildSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildSCfg(job.propertyMap)

  def shouldBuildCSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCSCfg(job.propertyMap)

  def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterIntraProceduralModule.getAPIpermOpt(job.propertyMap)

  def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AndroidInterIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)

  def defRef : scala.Function1[org.sireum.pilar.symbol.SymbolTable, org.sireum.alir.DefRef] = AndroidInterIntraProceduralModule.getDefRef(job.propertyMap)

  def isInputOutputParamPredicate : scala.Function1[org.sireum.pilar.symbol.ProcedureSymbolTable, scala.Tuple2[scala.Function1[java.lang.String, scala.Boolean], scala.Function1[java.lang.String, scala.Boolean]]] = AndroidInterIntraProceduralModule.getIsInputOutputParamPredicate(job.propertyMap)

  def switchAsOrderedMatch : scala.Boolean = AndroidInterIntraProceduralModule.getSwitchAsOrderedMatch(job.propertyMap)

  def procedureAbsUriIterator : scala.Option[scala.collection.Iterator[java.lang.String]] = AndroidInterIntraProceduralModule.getProcedureAbsUriIterator(job.propertyMap)


  def intraResult_=(intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult]) { AndroidInterIntraProceduralModule.setIntraResult(job.propertyMap, intraResult) }
  def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult] = AndroidInterIntraProceduralModule.getIntraResult(job.propertyMap)


  def interResult_=(interResult : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult) { AndroidInterIntraProceduralModule.setInterResult(job.propertyMap, interResult) }
  def interResult : org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult = AndroidInterIntraProceduralModule.getInterResult(job.propertyMap)
}