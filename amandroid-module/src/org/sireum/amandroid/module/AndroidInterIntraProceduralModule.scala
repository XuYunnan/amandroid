// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.AndroidInterIntraProcedural
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables
import org.sireum.amandroid.cache.AndroidCacheFile
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.SymbolTable
import scala.Function2
import scala.Option
import scala.collection.mutable.Map

object AndroidInterIntraProceduralModule extends PipelineModule {
  def title = "Android InterIntraProcedural Module"
  def origin = classOf[AndroidInterIntraProcedural]

  val globalParallelKey = "Global.parallel"
  val globalShouldBuildCCfgKey = "Global.shouldBuildCCfg"
  val globalShouldBuildOFAsCfgKey = "Global.shouldBuildOFAsCfg"
  val globalShouldBuildCSCfgKey = "Global.shouldBuildCSCfg"
  val globalInterResultKey = "Global.interResult"
  val globalAndroidVirtualMethodTablesKey = "Global.androidVirtualMethodTables"
  val globalAPIpermOptKey = "Global.APIpermOpt"
  val globalAndroidCacheKey = "Global.androidCache"
  val globalIntraResult_cCfgKey = "Global.intraResult_cCfg"
  val globalIntraResult_CfgKey = "Global.intraResult_Cfg"
  val globalShouldIncludeFlowFunctionKey = "Global.shouldIncludeFlowFunction"
  val globalShouldBuildSCfgKey = "Global.shouldBuildSCfg"
  val globalSymbolTableKey = "Global.symbolTable"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProceduralModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if(!(job ? AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey)) {
      val shouldIncludeFlowFunction = Class.forName("org.sireum.amandroid.module.AndroidInterIntraProcedural").getDeclaredMethod("$lessinit$greater$default$11").invoke(null).asInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]
      setShouldIncludeFlowFunction(job.propertyMap, shouldIncludeFlowFunction)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _parallel : scala.Option[AnyRef] = None
    var _parallelKey : scala.Option[String] = None

    val keylistparallel = List(AndroidInterIntraProceduralModule.globalParallelKey)
    keylistparallel.foreach(key => 
      if(job ? key) { 
        if(_parallel.isEmpty) {
          _parallel = Some(job(key))
          _parallelKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _parallel.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'parallel' keys '" + _parallelKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _parallel match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'parallel'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'parallel'")       
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(AndroidInterIntraProceduralModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key => 
      if(job ? key) { 
        if(_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.pilar.symbol.SymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.pilar.symbol.SymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")       
    }
    var _androidVirtualMethodTables : scala.Option[AnyRef] = None
    var _androidVirtualMethodTablesKey : scala.Option[String] = None

    val keylistandroidVirtualMethodTables = List(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey)
    keylistandroidVirtualMethodTables.foreach(key => 
      if(job ? key) { 
        if(_androidVirtualMethodTables.isEmpty) {
          _androidVirtualMethodTables = Some(job(key))
          _androidVirtualMethodTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidVirtualMethodTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidVirtualMethodTables' keys '" + _androidVirtualMethodTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidVirtualMethodTables match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidVirtualMethodTables'.  Expecting 'org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidVirtualMethodTables'")       
    }
    var _androidCache : scala.Option[AnyRef] = None
    var _androidCacheKey : scala.Option[String] = None

    val keylistandroidCache = List(AndroidInterIntraProceduralModule.globalAndroidCacheKey)
    keylistandroidCache.foreach(key => 
      if(job ? key) { 
        if(_androidCache.isEmpty) {
          _androidCache = Some(job(key))
          _androidCacheKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidCache.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidCache' keys '" + _androidCacheKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidCache match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidCache'.  Expecting 'org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidCache'")       
    }
    var _shouldBuildCCfg : scala.Option[AnyRef] = None
    var _shouldBuildCCfgKey : scala.Option[String] = None

    val keylistshouldBuildCCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey)
    keylistshouldBuildCCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildCCfg.isEmpty) {
          _shouldBuildCCfg = Some(job(key))
          _shouldBuildCCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCCfg' keys '" + _shouldBuildCCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCCfg'")       
    }
    var _shouldBuildOFAsCfg : scala.Option[AnyRef] = None
    var _shouldBuildOFAsCfgKey : scala.Option[String] = None

    val keylistshouldBuildOFAsCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey)
    keylistshouldBuildOFAsCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildOFAsCfg.isEmpty) {
          _shouldBuildOFAsCfg = Some(job(key))
          _shouldBuildOFAsCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildOFAsCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildOFAsCfg' keys '" + _shouldBuildOFAsCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildOFAsCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildOFAsCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildOFAsCfg'")       
    }
    var _shouldBuildSCfg : scala.Option[AnyRef] = None
    var _shouldBuildSCfgKey : scala.Option[String] = None

    val keylistshouldBuildSCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey)
    keylistshouldBuildSCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildSCfg.isEmpty) {
          _shouldBuildSCfg = Some(job(key))
          _shouldBuildSCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildSCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildSCfg' keys '" + _shouldBuildSCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildSCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildSCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildSCfg'")       
    }
    var _shouldBuildCSCfg : scala.Option[AnyRef] = None
    var _shouldBuildCSCfgKey : scala.Option[String] = None

    val keylistshouldBuildCSCfg = List(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey)
    keylistshouldBuildCSCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildCSCfg.isEmpty) {
          _shouldBuildCSCfg = Some(job(key))
          _shouldBuildCSCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildCSCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildCSCfg' keys '" + _shouldBuildCSCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildCSCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildCSCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildCSCfg'")       
    }
    var _APIpermOpt : scala.Option[AnyRef] = None
    var _APIpermOptKey : scala.Option[String] = None

    val keylistAPIpermOpt = List(AndroidInterIntraProceduralModule.globalAPIpermOptKey)
    keylistAPIpermOpt.foreach(key => 
      if(job ? key) { 
        if(_APIpermOpt.isEmpty) {
          _APIpermOpt = Some(job(key))
          _APIpermOptKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _APIpermOpt.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'APIpermOpt' keys '" + _APIpermOptKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _APIpermOpt match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'APIpermOpt'.  Expecting 'scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'APIpermOpt'")       
    }
    var _shouldIncludeFlowFunction : scala.Option[AnyRef] = None
    var _shouldIncludeFlowFunctionKey : scala.Option[String] = None

    val keylistshouldIncludeFlowFunction = List(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey)
    keylistshouldIncludeFlowFunction.foreach(key => 
      if(job ? key) { 
        if(_shouldIncludeFlowFunction.isEmpty) {
          _shouldIncludeFlowFunction = Some(job(key))
          _shouldIncludeFlowFunctionKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldIncludeFlowFunction.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldIncludeFlowFunction' keys '" + _shouldIncludeFlowFunctionKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldIncludeFlowFunction match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldIncludeFlowFunction'.  Expecting 'scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldIncludeFlowFunction'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? AndroidInterIntraProceduralModule.globalIntraResult_CfgKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'intraResult_Cfg'. Expecting (AndroidInterIntraProceduralModule.globalIntraResult_CfgKey)") 
    }

    if(job ? AndroidInterIntraProceduralModule.globalIntraResult_CfgKey && !job(AndroidInterIntraProceduralModule.globalIntraResult_CfgKey).isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidInterIntraProceduralModule.globalIntraResult_CfgKey.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]' but found '" + 
        job(AndroidInterIntraProceduralModule.globalIntraResult_CfgKey).getClass.toString + "'")
    } 

    if(!(job ? AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'intraResult_cCfg'. Expecting (AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey)") 
    }

    if(job ? AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey && !job(AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey).isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]' but found '" + 
        job(AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey).getClass.toString + "'")
    } 

    if(!(job ? AndroidInterIntraProceduralModule.globalInterResultKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'interResult'. Expecting (AndroidInterIntraProceduralModule.globalInterResultKey)") 
    }

    if(job ? AndroidInterIntraProceduralModule.globalInterResultKey && !job(AndroidInterIntraProceduralModule.globalInterResultKey).isInstanceOf[scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidInterIntraProceduralModule.globalInterResultKey.  Expecting 'scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]' but found '" + 
        job(AndroidInterIntraProceduralModule.globalInterResultKey).getClass.toString + "'")
    } 
    return tags
  }

  def getParallel (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalParallelKey)) {
       return options(AndroidInterIntraProceduralModule.globalParallelKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setParallel (options : MMap[Property.Key, Any], parallel : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalParallelKey) = parallel

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.SymbolTable = {
    if (options.contains(AndroidInterIntraProceduralModule.globalSymbolTableKey)) {
       return options(AndroidInterIntraProceduralModule.globalSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.SymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.pilar.symbol.SymbolTable) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getAndroidVirtualMethodTables (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = {
    if (options.contains(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey)) {
       return options(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey).asInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidVirtualMethodTables (options : MMap[Property.Key, Any], androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalAndroidVirtualMethodTablesKey) = androidVirtualMethodTables

    return options
  }

  def getAndroidCache (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalAndroidCacheKey)) {
       return options(AndroidInterIntraProceduralModule.globalAndroidCacheKey).asInstanceOf[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidCache (options : MMap[Property.Key, Any], androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalAndroidCacheKey) = androidCache

    return options
  }

  def getShouldBuildCCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCCfg (options : MMap[Property.Key, Any], shouldBuildCCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildCCfgKey) = shouldBuildCCfg

    return options
  }

  def getShouldBuildOFAsCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildOFAsCfg (options : MMap[Property.Key, Any], shouldBuildOFAsCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildOFAsCfgKey) = shouldBuildOFAsCfg

    return options
  }

  def getShouldBuildSCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildSCfg (options : MMap[Property.Key, Any], shouldBuildSCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildSCfgKey) = shouldBuildSCfg

    return options
  }

  def getShouldBuildCSCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildCSCfg (options : MMap[Property.Key, Any], shouldBuildCSCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldBuildCSCfgKey) = shouldBuildCSCfg

    return options
  }

  def getAPIpermOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalAPIpermOptKey)) {
       return options(AndroidInterIntraProceduralModule.globalAPIpermOptKey).asInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAPIpermOpt (options : MMap[Property.Key, Any], APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalAPIpermOptKey) = APIpermOpt

    return options
  }

  def getShouldIncludeFlowFunction (options : scala.collection.Map[Property.Key, Any]) : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey)) {
       return options(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey).asInstanceOf[scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldIncludeFlowFunction (options : MMap[Property.Key, Any], shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalShouldIncludeFlowFunctionKey) = shouldIncludeFlowFunction

    return options
  }

  def getIntraResult_Cfg (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalIntraResult_CfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalIntraResult_CfgKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIntraResult_Cfg (options : MMap[Property.Key, Any], intraResult_Cfg : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalIntraResult_CfgKey) = intraResult_Cfg

    return options
  }

  def getIntraResult_cCfg (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey)) {
       return options(AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIntraResult_cCfg (options : MMap[Property.Key, Any], intraResult_cCfg : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalIntraResult_cCfgKey) = intraResult_cCfg

    return options
  }

  def getInterResult (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]] = {
    if (options.contains(AndroidInterIntraProceduralModule.globalInterResultKey)) {
       return options(AndroidInterIntraProceduralModule.globalInterResultKey).asInstanceOf[scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setInterResult (options : MMap[Property.Key, Any], interResult : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AndroidInterIntraProceduralModule.globalInterResultKey) = interResult

    return options
  }

  object ConsumerView {
    implicit class AndroidInterIntraProceduralModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def parallel : scala.Boolean = AndroidInterIntraProceduralModule.getParallel(job.propertyMap)
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterIntraProceduralModule.getSymbolTable(job.propertyMap)
      def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = AndroidInterIntraProceduralModule.getAndroidVirtualMethodTables(job.propertyMap)
      def androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = AndroidInterIntraProceduralModule.getAndroidCache(job.propertyMap)
      def shouldBuildCCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCCfg(job.propertyMap)
      def shouldBuildOFAsCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)
      def shouldBuildSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildSCfg(job.propertyMap)
      def shouldBuildCSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCSCfg(job.propertyMap)
      def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterIntraProceduralModule.getAPIpermOpt(job.propertyMap)
      def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AndroidInterIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)
      def intraResult_Cfg : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getIntraResult_Cfg(job.propertyMap)
      def intraResult_cCfg : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getIntraResult_cCfg(job.propertyMap)
      def interResult : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getInterResult(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class AndroidInterIntraProceduralModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def parallel_=(parallel : scala.Boolean) { AndroidInterIntraProceduralModule.setParallel(job.propertyMap, parallel) }
      def parallel : scala.Boolean = AndroidInterIntraProceduralModule.getParallel(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { AndroidInterIntraProceduralModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterIntraProceduralModule.getSymbolTable(job.propertyMap)

      def androidVirtualMethodTables_=(androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables) { AndroidInterIntraProceduralModule.setAndroidVirtualMethodTables(job.propertyMap, androidVirtualMethodTables) }
      def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = AndroidInterIntraProceduralModule.getAndroidVirtualMethodTables(job.propertyMap)

      def androidCache_=(androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]) { AndroidInterIntraProceduralModule.setAndroidCache(job.propertyMap, androidCache) }
      def androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = AndroidInterIntraProceduralModule.getAndroidCache(job.propertyMap)

      def shouldBuildCCfg_=(shouldBuildCCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildCCfg(job.propertyMap, shouldBuildCCfg) }
      def shouldBuildCCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCCfg(job.propertyMap)

      def shouldBuildOFAsCfg_=(shouldBuildOFAsCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildOFAsCfg(job.propertyMap, shouldBuildOFAsCfg) }
      def shouldBuildOFAsCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)

      def shouldBuildSCfg_=(shouldBuildSCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildSCfg(job.propertyMap, shouldBuildSCfg) }
      def shouldBuildSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildSCfg(job.propertyMap)

      def shouldBuildCSCfg_=(shouldBuildCSCfg : scala.Boolean) { AndroidInterIntraProceduralModule.setShouldBuildCSCfg(job.propertyMap, shouldBuildCSCfg) }
      def shouldBuildCSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCSCfg(job.propertyMap)

      def APIpermOpt_=(APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]) { AndroidInterIntraProceduralModule.setAPIpermOpt(job.propertyMap, APIpermOpt) }
      def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterIntraProceduralModule.getAPIpermOpt(job.propertyMap)

      def shouldIncludeFlowFunction_=(shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]]) { AndroidInterIntraProceduralModule.setShouldIncludeFlowFunction(job.propertyMap, shouldIncludeFlowFunction) }
      def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AndroidInterIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)

      def intraResult_Cfg_=(intraResult_Cfg : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]) { AndroidInterIntraProceduralModule.setIntraResult_Cfg(job.propertyMap, intraResult_Cfg) }
      def intraResult_Cfg : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getIntraResult_Cfg(job.propertyMap)

      def intraResult_cCfg_=(intraResult_cCfg : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) { AndroidInterIntraProceduralModule.setIntraResult_cCfg(job.propertyMap, intraResult_cCfg) }
      def intraResult_cCfg : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getIntraResult_cCfg(job.propertyMap)

      def interResult_=(interResult : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) { AndroidInterIntraProceduralModule.setInterResult(job.propertyMap, interResult) }
      def interResult : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getInterResult(job.propertyMap)
    }
  }
}

trait AndroidInterIntraProceduralModule {
  def job : PipelineJob

  def parallel : scala.Boolean = AndroidInterIntraProceduralModule.getParallel(job.propertyMap)

  def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterIntraProceduralModule.getSymbolTable(job.propertyMap)

  def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = AndroidInterIntraProceduralModule.getAndroidVirtualMethodTables(job.propertyMap)

  def androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = AndroidInterIntraProceduralModule.getAndroidCache(job.propertyMap)

  def shouldBuildCCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCCfg(job.propertyMap)

  def shouldBuildOFAsCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)

  def shouldBuildSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildSCfg(job.propertyMap)

  def shouldBuildCSCfg : scala.Boolean = AndroidInterIntraProceduralModule.getShouldBuildCSCfg(job.propertyMap)

  def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterIntraProceduralModule.getAPIpermOpt(job.propertyMap)

  def shouldIncludeFlowFunction : scala.Function2[org.sireum.pilar.ast.LocationDecl, scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Tuple2[scala.collection.Iterable[org.sireum.pilar.ast.CatchClause], scala.Boolean]] = AndroidInterIntraProceduralModule.getShouldIncludeFlowFunction(job.propertyMap)


  def intraResult_Cfg_=(intraResult_Cfg : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]) { AndroidInterIntraProceduralModule.setIntraResult_Cfg(job.propertyMap, intraResult_Cfg) }
  def intraResult_Cfg : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getIntraResult_Cfg(job.propertyMap)


  def intraResult_cCfg_=(intraResult_cCfg : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) { AndroidInterIntraProceduralModule.setIntraResult_cCfg(job.propertyMap, intraResult_cCfg) }
  def intraResult_cCfg : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getIntraResult_cCfg(job.propertyMap)


  def interResult_=(interResult : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) { AndroidInterIntraProceduralModule.setInterResult(job.propertyMap, interResult) }
  def interResult : scala.Option[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]] = AndroidInterIntraProceduralModule.getInterResult(job.propertyMap)
}