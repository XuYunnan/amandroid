// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.AndroidInterProcedural
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables
import org.sireum.amandroid.appInfo.PrepareApp
import org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult
import org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.pilar.symbol.SymbolTable
import scala.Option
import scala.collection.immutable.Map
import scala.collection.mutable.Map

object AndroidInterProceduralModule extends PipelineModule {
  def title = "Android InterProcedural Module"
  def origin = classOf[AndroidInterProcedural]

  val globalParallelKey = "Global.parallel"
  val globalAndroidLibInfoTablesOptKey = "Global.androidLibInfoTablesOpt"
  val globalShouldBuildOFAsCfgKey = "Global.shouldBuildOFAsCfg"
  val globalInterResultKey = "Global.interResult"
  val globalAPIpermOptKey = "Global.APIpermOpt"
  val globalAndroidCacheKey = "Global.androidCache"
  val globalProcedureMapKey = "Global.procedureMap"
  val globalAppInfoOptKey = "Global.appInfoOpt"
  val globalIntraResultKey = "Global.intraResult"
  val globalSymbolTableKey = "Global.symbolTable"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.AndroidInterProceduralModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if(!(job ? AndroidInterProceduralModule.globalAndroidCacheKey)) {
      val androidCache = Class.forName("org.sireum.amandroid.module.AndroidInterProcedural").getDeclaredMethod("$lessinit$greater$default$5").invoke(null).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
      setAndroidCache(job.propertyMap, androidCache)
    }

    if(!(job ? AndroidInterProceduralModule.globalShouldBuildOFAsCfgKey)) {
      val shouldBuildOFAsCfg = Class.forName("org.sireum.amandroid.module.AndroidInterProcedural").getDeclaredMethod("$lessinit$greater$default$6").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildOFAsCfg(job.propertyMap, shouldBuildOFAsCfg)
    }

    if(!(job ? AndroidInterProceduralModule.globalAPIpermOptKey)) {
      val APIpermOpt = Class.forName("org.sireum.amandroid.module.AndroidInterProcedural").getDeclaredMethod("$lessinit$greater$default$7").invoke(null).asInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]
      setAPIpermOpt(job.propertyMap, APIpermOpt)
    }

    if(!(job ? AndroidInterProceduralModule.globalAppInfoOptKey)) {
      val appInfoOpt = Class.forName("org.sireum.amandroid.module.AndroidInterProcedural").getDeclaredMethod("$lessinit$greater$default$8").invoke(null).asInstanceOf[scala.Option[org.sireum.amandroid.appInfo.PrepareApp]]
      setAppInfoOpt(job.propertyMap, appInfoOpt)
    }

    if(!(job ? AndroidInterProceduralModule.globalProcedureMapKey)) {
      val procedureMap = Class.forName("org.sireum.amandroid.module.AndroidInterProcedural").getDeclaredMethod("$lessinit$greater$default$10").invoke(null).asInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]
      setProcedureMap(job.propertyMap, procedureMap)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _parallel : scala.Option[AnyRef] = None
    var _parallelKey : scala.Option[String] = None

    val keylistparallel = List(AndroidInterProceduralModule.globalParallelKey)
    keylistparallel.foreach(key => 
      if(job ? key) { 
        if(_parallel.isEmpty) {
          _parallel = Some(job(key))
          _parallelKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _parallel.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'parallel' keys '" + _parallelKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _parallel match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'parallel'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'parallel'")       
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(AndroidInterProceduralModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key => 
      if(job ? key) { 
        if(_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.pilar.symbol.SymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.pilar.symbol.SymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")       
    }
    var _androidLibInfoTablesOpt : scala.Option[AnyRef] = None
    var _androidLibInfoTablesOptKey : scala.Option[String] = None

    val keylistandroidLibInfoTablesOpt = List(AndroidInterProceduralModule.globalAndroidLibInfoTablesOptKey)
    keylistandroidLibInfoTablesOpt.foreach(key => 
      if(job ? key) { 
        if(_androidLibInfoTablesOpt.isEmpty) {
          _androidLibInfoTablesOpt = Some(job(key))
          _androidLibInfoTablesOptKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidLibInfoTablesOpt.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidLibInfoTablesOpt' keys '" + _androidLibInfoTablesOptKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidLibInfoTablesOpt match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidLibInfoTablesOpt'.  Expecting 'scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidLibInfoTablesOpt'")       
    }
    var _androidCache : scala.Option[AnyRef] = None
    var _androidCacheKey : scala.Option[String] = None

    val keylistandroidCache = List(AndroidInterProceduralModule.globalAndroidCacheKey)
    keylistandroidCache.foreach(key => 
      if(job ? key) { 
        if(_androidCache.isEmpty) {
          _androidCache = Some(job(key))
          _androidCacheKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidCache.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidCache' keys '" + _androidCacheKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidCache match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidCache'.  Expecting 'scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidCache'")       
    }
    var _shouldBuildOFAsCfg : scala.Option[AnyRef] = None
    var _shouldBuildOFAsCfgKey : scala.Option[String] = None

    val keylistshouldBuildOFAsCfg = List(AndroidInterProceduralModule.globalShouldBuildOFAsCfgKey)
    keylistshouldBuildOFAsCfg.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildOFAsCfg.isEmpty) {
          _shouldBuildOFAsCfg = Some(job(key))
          _shouldBuildOFAsCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildOFAsCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildOFAsCfg' keys '" + _shouldBuildOFAsCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildOFAsCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildOFAsCfg'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildOFAsCfg'")       
    }
    var _APIpermOpt : scala.Option[AnyRef] = None
    var _APIpermOptKey : scala.Option[String] = None

    val keylistAPIpermOpt = List(AndroidInterProceduralModule.globalAPIpermOptKey)
    keylistAPIpermOpt.foreach(key => 
      if(job ? key) { 
        if(_APIpermOpt.isEmpty) {
          _APIpermOpt = Some(job(key))
          _APIpermOptKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _APIpermOpt.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'APIpermOpt' keys '" + _APIpermOptKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _APIpermOpt match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'APIpermOpt'.  Expecting 'scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'APIpermOpt'")       
    }
    var _appInfoOpt : scala.Option[AnyRef] = None
    var _appInfoOptKey : scala.Option[String] = None

    val keylistappInfoOpt = List(AndroidInterProceduralModule.globalAppInfoOptKey)
    keylistappInfoOpt.foreach(key => 
      if(job ? key) { 
        if(_appInfoOpt.isEmpty) {
          _appInfoOpt = Some(job(key))
          _appInfoOptKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _appInfoOpt.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'appInfoOpt' keys '" + _appInfoOptKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _appInfoOpt match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.appInfo.PrepareApp]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'appInfoOpt'.  Expecting 'scala.Option[org.sireum.amandroid.appInfo.PrepareApp]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'appInfoOpt'")       
    }
    var _intraResult : scala.Option[AnyRef] = None
    var _intraResultKey : scala.Option[String] = None

    val keylistintraResult = List(AndroidInterProceduralModule.globalIntraResultKey)
    keylistintraResult.foreach(key => 
      if(job ? key) { 
        if(_intraResult.isEmpty) {
          _intraResult = Some(job(key))
          _intraResultKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _intraResult.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'intraResult' keys '" + _intraResultKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _intraResult match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'intraResult'.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'intraResult'")       
    }
    var _procedureMap : scala.Option[AnyRef] = None
    var _procedureMapKey : scala.Option[String] = None

    val keylistprocedureMap = List(AndroidInterProceduralModule.globalProcedureMapKey)
    keylistprocedureMap.foreach(key => 
      if(job ? key) { 
        if(_procedureMap.isEmpty) {
          _procedureMap = Some(job(key))
          _procedureMapKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _procedureMap.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'procedureMap' keys '" + _procedureMapKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _procedureMap match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'procedureMap'.  Expecting 'scala.collection.immutable.Map[java.lang.String, java.lang.String]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'procedureMap'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? AndroidInterProceduralModule.globalInterResultKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'interResult'. Expecting (AndroidInterProceduralModule.globalInterResultKey)") 
    }

    if(job ? AndroidInterProceduralModule.globalInterResultKey && !job(AndroidInterProceduralModule.globalInterResultKey).isInstanceOf[org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidInterProceduralModule.globalInterResultKey.  Expecting 'org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult' but found '" + 
        job(AndroidInterProceduralModule.globalInterResultKey).getClass.toString + "'")
    } 
    return tags
  }

  def getParallel (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterProceduralModule.globalParallelKey)) {
       return options(AndroidInterProceduralModule.globalParallelKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setParallel (options : MMap[Property.Key, Any], parallel : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalParallelKey) = parallel

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.SymbolTable = {
    if (options.contains(AndroidInterProceduralModule.globalSymbolTableKey)) {
       return options(AndroidInterProceduralModule.globalSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.SymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.pilar.symbol.SymbolTable) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getAndroidLibInfoTablesOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = {
    if (options.contains(AndroidInterProceduralModule.globalAndroidLibInfoTablesOptKey)) {
       return options(AndroidInterProceduralModule.globalAndroidLibInfoTablesOptKey).asInstanceOf[scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidLibInfoTablesOpt (options : MMap[Property.Key, Any], androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalAndroidLibInfoTablesOptKey) = androidLibInfoTablesOpt

    return options
  }

  def getAndroidCache (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = {
    if (options.contains(AndroidInterProceduralModule.globalAndroidCacheKey)) {
       return options(AndroidInterProceduralModule.globalAndroidCacheKey).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidCache (options : MMap[Property.Key, Any], androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalAndroidCacheKey) = androidCache

    return options
  }

  def getShouldBuildOFAsCfg (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(AndroidInterProceduralModule.globalShouldBuildOFAsCfgKey)) {
       return options(AndroidInterProceduralModule.globalShouldBuildOFAsCfgKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildOFAsCfg (options : MMap[Property.Key, Any], shouldBuildOFAsCfg : scala.Boolean) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalShouldBuildOFAsCfgKey) = shouldBuildOFAsCfg

    return options
  }

  def getAPIpermOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = {
    if (options.contains(AndroidInterProceduralModule.globalAPIpermOptKey)) {
       return options(AndroidInterProceduralModule.globalAPIpermOptKey).asInstanceOf[scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAPIpermOpt (options : MMap[Property.Key, Any], APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalAPIpermOptKey) = APIpermOpt

    return options
  }

  def getAppInfoOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = {
    if (options.contains(AndroidInterProceduralModule.globalAppInfoOptKey)) {
       return options(AndroidInterProceduralModule.globalAppInfoOptKey).asInstanceOf[scala.Option[org.sireum.amandroid.appInfo.PrepareApp]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAppInfoOpt (options : MMap[Property.Key, Any], appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp]) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalAppInfoOptKey) = appInfoOpt

    return options
  }

  def getIntraResult (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = {
    if (options.contains(AndroidInterProceduralModule.globalIntraResultKey)) {
       return options(AndroidInterProceduralModule.globalIntraResultKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIntraResult (options : MMap[Property.Key, Any], intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalIntraResultKey) = intraResult

    return options
  }

  def getProcedureMap (options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Map[java.lang.String, java.lang.String] = {
    if (options.contains(AndroidInterProceduralModule.globalProcedureMapKey)) {
       return options(AndroidInterProceduralModule.globalProcedureMapKey).asInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureMap (options : MMap[Property.Key, Any], procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String]) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalProcedureMapKey) = procedureMap

    return options
  }

  def getInterResult (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult = {
    if (options.contains(AndroidInterProceduralModule.globalInterResultKey)) {
       return options(AndroidInterProceduralModule.globalInterResultKey).asInstanceOf[org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setInterResult (options : MMap[Property.Key, Any], interResult : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult) : MMap[Property.Key, Any] = {

    options(AndroidInterProceduralModule.globalInterResultKey) = interResult

    return options
  }

  object ConsumerView {
    implicit class AndroidInterProceduralModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def parallel : scala.Boolean = AndroidInterProceduralModule.getParallel(job.propertyMap)
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterProceduralModule.getSymbolTable(job.propertyMap)
      def androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = AndroidInterProceduralModule.getAndroidLibInfoTablesOpt(job.propertyMap)
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = AndroidInterProceduralModule.getAndroidCache(job.propertyMap)
      def shouldBuildOFAsCfg : scala.Boolean = AndroidInterProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)
      def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterProceduralModule.getAPIpermOpt(job.propertyMap)
      def appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = AndroidInterProceduralModule.getAppInfoOpt(job.propertyMap)
      def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = AndroidInterProceduralModule.getIntraResult(job.propertyMap)
      def procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String] = AndroidInterProceduralModule.getProcedureMap(job.propertyMap)
      def interResult : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult = AndroidInterProceduralModule.getInterResult(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class AndroidInterProceduralModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def parallel_=(parallel : scala.Boolean) { AndroidInterProceduralModule.setParallel(job.propertyMap, parallel) }
      def parallel : scala.Boolean = AndroidInterProceduralModule.getParallel(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { AndroidInterProceduralModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterProceduralModule.getSymbolTable(job.propertyMap)

      def androidLibInfoTablesOpt_=(androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) { AndroidInterProceduralModule.setAndroidLibInfoTablesOpt(job.propertyMap, androidLibInfoTablesOpt) }
      def androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = AndroidInterProceduralModule.getAndroidLibInfoTablesOpt(job.propertyMap)

      def androidCache_=(androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) { AndroidInterProceduralModule.setAndroidCache(job.propertyMap, androidCache) }
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = AndroidInterProceduralModule.getAndroidCache(job.propertyMap)

      def shouldBuildOFAsCfg_=(shouldBuildOFAsCfg : scala.Boolean) { AndroidInterProceduralModule.setShouldBuildOFAsCfg(job.propertyMap, shouldBuildOFAsCfg) }
      def shouldBuildOFAsCfg : scala.Boolean = AndroidInterProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)

      def APIpermOpt_=(APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]) { AndroidInterProceduralModule.setAPIpermOpt(job.propertyMap, APIpermOpt) }
      def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterProceduralModule.getAPIpermOpt(job.propertyMap)

      def appInfoOpt_=(appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp]) { AndroidInterProceduralModule.setAppInfoOpt(job.propertyMap, appInfoOpt) }
      def appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = AndroidInterProceduralModule.getAppInfoOpt(job.propertyMap)

      def intraResult_=(intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]) { AndroidInterProceduralModule.setIntraResult(job.propertyMap, intraResult) }
      def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = AndroidInterProceduralModule.getIntraResult(job.propertyMap)

      def procedureMap_=(procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String]) { AndroidInterProceduralModule.setProcedureMap(job.propertyMap, procedureMap) }
      def procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String] = AndroidInterProceduralModule.getProcedureMap(job.propertyMap)

      def interResult_=(interResult : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult) { AndroidInterProceduralModule.setInterResult(job.propertyMap, interResult) }
      def interResult : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult = AndroidInterProceduralModule.getInterResult(job.propertyMap)
    }
  }
}

trait AndroidInterProceduralModule {
  def job : PipelineJob

  def parallel : scala.Boolean = AndroidInterProceduralModule.getParallel(job.propertyMap)

  def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidInterProceduralModule.getSymbolTable(job.propertyMap)

  def androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = AndroidInterProceduralModule.getAndroidLibInfoTablesOpt(job.propertyMap)

  def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = AndroidInterProceduralModule.getAndroidCache(job.propertyMap)

  def shouldBuildOFAsCfg : scala.Boolean = AndroidInterProceduralModule.getShouldBuildOFAsCfg(job.propertyMap)

  def APIpermOpt : scala.Option[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]] = AndroidInterProceduralModule.getAPIpermOpt(job.propertyMap)

  def appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = AndroidInterProceduralModule.getAppInfoOpt(job.propertyMap)

  def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = AndroidInterProceduralModule.getIntraResult(job.propertyMap)

  def procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String] = AndroidInterProceduralModule.getProcedureMap(job.propertyMap)


  def interResult_=(interResult : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult) { AndroidInterProceduralModule.setInterResult(job.propertyMap, interResult) }
  def interResult : org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult = AndroidInterProceduralModule.getInterResult(job.propertyMap)
}