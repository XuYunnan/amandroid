// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.CG
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables
import org.sireum.amandroid.appInfo.PrepareApp
import org.sireum.amandroid.callGraph.CallGraph
import org.sireum.amandroid.module.AndroidInterProcedural.AndroidInterAnalysisResult
import org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Option
import scala.collection.Seq
import scala.collection.mutable.Map

object CGModule extends PipelineModule {
  def title = "System Control Flow Graph with OFA Builder"
  def origin = classOf[CG]

  val globalProcedureSymbolTablesKey = "Global.procedureSymbolTables"
  val globalAndroidCacheKey = "Global.androidCache"
  val globalCfgsKey = "Global.cfgs"
  val globalAppInfoOptKey = "Global.appInfoOpt"
  val globalAndroidLibInfoTablesKey = "Global.androidLibInfoTables"
  val callGraphKey = "CG.callGraph"
  val globalRdasKey = "Global.rdas"
  val globalCallGraphKey = "Global.callGraph"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.CGModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _cfgs : scala.Option[AnyRef] = None
    var _cfgsKey : scala.Option[String] = None

    val keylistcfgs = List(CGModule.globalCfgsKey)
    keylistcfgs.foreach(key => 
      if(job ? key) { 
        if(_cfgs.isEmpty) {
          _cfgs = Some(job(key))
          _cfgsKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _cfgs.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'cfgs' keys '" + _cfgsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _cfgs match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'cfgs'.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'cfgs'")       
    }
    var _rdas : scala.Option[AnyRef] = None
    var _rdasKey : scala.Option[String] = None

    val keylistrdas = List(CGModule.globalRdasKey)
    keylistrdas.foreach(key => 
      if(job ? key) { 
        if(_rdas.isEmpty) {
          _rdas = Some(job(key))
          _rdasKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _rdas.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'rdas' keys '" + _rdasKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _rdas match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'rdas'.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'rdas'")       
    }
    var _androidCache : scala.Option[AnyRef] = None
    var _androidCacheKey : scala.Option[String] = None

    val keylistandroidCache = List(CGModule.globalAndroidCacheKey)
    keylistandroidCache.foreach(key => 
      if(job ? key) { 
        if(_androidCache.isEmpty) {
          _androidCache = Some(job(key))
          _androidCacheKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidCache.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidCache' keys '" + _androidCacheKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidCache match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidCache'.  Expecting 'scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidCache'")       
    }
    var _appInfoOpt : scala.Option[AnyRef] = None
    var _appInfoOptKey : scala.Option[String] = None

    val keylistappInfoOpt = List(CGModule.globalAppInfoOptKey)
    keylistappInfoOpt.foreach(key => 
      if(job ? key) { 
        if(_appInfoOpt.isEmpty) {
          _appInfoOpt = Some(job(key))
          _appInfoOptKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _appInfoOpt.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'appInfoOpt' keys '" + _appInfoOptKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _appInfoOpt match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.appInfo.PrepareApp]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'appInfoOpt'.  Expecting 'scala.Option[org.sireum.amandroid.appInfo.PrepareApp]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'appInfoOpt'")       
    }
    var _procedureSymbolTables : scala.Option[AnyRef] = None
    var _procedureSymbolTablesKey : scala.Option[String] = None

    val keylistprocedureSymbolTables = List(CGModule.globalProcedureSymbolTablesKey)
    keylistprocedureSymbolTables.foreach(key => 
      if(job ? key) { 
        if(_procedureSymbolTables.isEmpty) {
          _procedureSymbolTables = Some(job(key))
          _procedureSymbolTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _procedureSymbolTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'procedureSymbolTables' keys '" + _procedureSymbolTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _procedureSymbolTables match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'procedureSymbolTables'.  Expecting 'scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'procedureSymbolTables'")       
    }
    var _androidLibInfoTables : scala.Option[AnyRef] = None
    var _androidLibInfoTablesKey : scala.Option[String] = None

    val keylistandroidLibInfoTables = List(CGModule.globalAndroidLibInfoTablesKey)
    keylistandroidLibInfoTables.foreach(key => 
      if(job ? key) { 
        if(_androidLibInfoTables.isEmpty) {
          _androidLibInfoTables = Some(job(key))
          _androidLibInfoTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidLibInfoTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidLibInfoTables' keys '" + _androidLibInfoTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidLibInfoTables match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidLibInfoTables'.  Expecting 'org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidLibInfoTables'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? CGModule.callGraphKey) && !(job ? CGModule.globalCallGraphKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'callGraph'. Expecting (CGModule.callGraphKey or CGModule.globalCallGraphKey)") 
    }

    if(job ? CGModule.callGraphKey && !job(CGModule.callGraphKey).isInstanceOf[org.sireum.amandroid.callGraph.CallGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for CGModule.callGraphKey.  Expecting 'org.sireum.amandroid.callGraph.CallGraph[java.lang.String]' but found '" + 
        job(CGModule.callGraphKey).getClass.toString + "'")
    } 

    if(job ? CGModule.globalCallGraphKey && !job(CGModule.globalCallGraphKey).isInstanceOf[org.sireum.amandroid.callGraph.CallGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for CGModule.globalCallGraphKey.  Expecting 'org.sireum.amandroid.callGraph.CallGraph[java.lang.String]' but found '" + 
        job(CGModule.globalCallGraphKey).getClass.toString + "'")
    } 
    return tags
  }

  def getCfgs (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = {
    if (options.contains(CGModule.globalCfgsKey)) {
       return options(CGModule.globalCfgsKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCfgs (options : MMap[Property.Key, Any], cfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(CGModule.globalCfgsKey) = cfgs

    return options
  }

  def getRdas (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]] = {
    if (options.contains(CGModule.globalRdasKey)) {
       return options(CGModule.globalRdasKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setRdas (options : MMap[Property.Key, Any], rdas : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]) : MMap[Property.Key, Any] = {

    options(CGModule.globalRdasKey) = rdas

    return options
  }

  def getAndroidCache (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = {
    if (options.contains(CGModule.globalAndroidCacheKey)) {
       return options(CGModule.globalAndroidCacheKey).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidCache (options : MMap[Property.Key, Any], androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(CGModule.globalAndroidCacheKey) = androidCache

    return options
  }

  def getAppInfoOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = {
    if (options.contains(CGModule.globalAppInfoOptKey)) {
       return options(CGModule.globalAppInfoOptKey).asInstanceOf[scala.Option[org.sireum.amandroid.appInfo.PrepareApp]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAppInfoOpt (options : MMap[Property.Key, Any], appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp]) : MMap[Property.Key, Any] = {

    options(CGModule.globalAppInfoOptKey) = appInfoOpt

    return options
  }

  def getProcedureSymbolTables (options : scala.collection.Map[Property.Key, Any]) : scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable] = {
    if (options.contains(CGModule.globalProcedureSymbolTablesKey)) {
       return options(CGModule.globalProcedureSymbolTablesKey).asInstanceOf[scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureSymbolTables (options : MMap[Property.Key, Any], procedureSymbolTables : scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable]) : MMap[Property.Key, Any] = {

    options(CGModule.globalProcedureSymbolTablesKey) = procedureSymbolTables

    return options
  }

  def getAndroidLibInfoTables (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = {
    if (options.contains(CGModule.globalAndroidLibInfoTablesKey)) {
       return options(CGModule.globalAndroidLibInfoTablesKey).asInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidLibInfoTables (options : MMap[Property.Key, Any], androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables) : MMap[Property.Key, Any] = {

    options(CGModule.globalAndroidLibInfoTablesKey) = androidLibInfoTables

    return options
  }

  def getCallGraph (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.callGraph.CallGraph[java.lang.String] = {
    if (options.contains(CGModule.globalCallGraphKey)) {
       return options(CGModule.globalCallGraphKey).asInstanceOf[org.sireum.amandroid.callGraph.CallGraph[java.lang.String]]
    }
    if (options.contains(CGModule.callGraphKey)) {
       return options(CGModule.callGraphKey).asInstanceOf[org.sireum.amandroid.callGraph.CallGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCallGraph (options : MMap[Property.Key, Any], callGraph : org.sireum.amandroid.callGraph.CallGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(CGModule.globalCallGraphKey) = callGraph
    options(callGraphKey) = callGraph

    return options
  }

  object ConsumerView {
    implicit class CGModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def cfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = CGModule.getCfgs(job.propertyMap)
      def rdas : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]] = CGModule.getRdas(job.propertyMap)
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = CGModule.getAndroidCache(job.propertyMap)
      def appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = CGModule.getAppInfoOpt(job.propertyMap)
      def procedureSymbolTables : scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable] = CGModule.getProcedureSymbolTables(job.propertyMap)
      def androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = CGModule.getAndroidLibInfoTables(job.propertyMap)
      def callGraph : org.sireum.amandroid.callGraph.CallGraph[java.lang.String] = CGModule.getCallGraph(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class CGModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def cfgs_=(cfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]]) { CGModule.setCfgs(job.propertyMap, cfgs) }
      def cfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = CGModule.getCfgs(job.propertyMap)

      def rdas_=(rdas : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]) { CGModule.setRdas(job.propertyMap, rdas) }
      def rdas : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]] = CGModule.getRdas(job.propertyMap)

      def androidCache_=(androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) { CGModule.setAndroidCache(job.propertyMap, androidCache) }
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = CGModule.getAndroidCache(job.propertyMap)

      def appInfoOpt_=(appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp]) { CGModule.setAppInfoOpt(job.propertyMap, appInfoOpt) }
      def appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = CGModule.getAppInfoOpt(job.propertyMap)

      def procedureSymbolTables_=(procedureSymbolTables : scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable]) { CGModule.setProcedureSymbolTables(job.propertyMap, procedureSymbolTables) }
      def procedureSymbolTables : scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable] = CGModule.getProcedureSymbolTables(job.propertyMap)

      def androidLibInfoTables_=(androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables) { CGModule.setAndroidLibInfoTables(job.propertyMap, androidLibInfoTables) }
      def androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = CGModule.getAndroidLibInfoTables(job.propertyMap)

      def callGraph_=(callGraph : org.sireum.amandroid.callGraph.CallGraph[java.lang.String]) { CGModule.setCallGraph(job.propertyMap, callGraph) }
      def callGraph : org.sireum.amandroid.callGraph.CallGraph[java.lang.String] = CGModule.getCallGraph(job.propertyMap)
    }
  }
}

trait CGModule {
  def job : PipelineJob

  def cfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.ControlFlowGraph[java.lang.String]] = CGModule.getCfgs(job.propertyMap)

  def rdas : scala.collection.mutable.Map[java.lang.String, org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]] = CGModule.getRdas(job.propertyMap)

  def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = CGModule.getAndroidCache(job.propertyMap)

  def appInfoOpt : scala.Option[org.sireum.amandroid.appInfo.PrepareApp] = CGModule.getAppInfoOpt(job.propertyMap)

  def procedureSymbolTables : scala.collection.Seq[org.sireum.pilar.symbol.ProcedureSymbolTable] = CGModule.getProcedureSymbolTables(job.propertyMap)

  def androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = CGModule.getAndroidLibInfoTables(job.propertyMap)


  def callGraph_=(callGraph : org.sireum.amandroid.callGraph.CallGraph[java.lang.String]) { CGModule.setCallGraph(job.propertyMap, callGraph) }
  def callGraph : org.sireum.amandroid.callGraph.CallGraph[java.lang.String] = CGModule.getCallGraph(job.propertyMap)
}