// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.PilarAndroidSymbolResolver
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables
import org.sireum.pilar.ast.Model
import org.sireum.pilar.symbol.SymbolTable
import scala.Option
import scala.collection.immutable.Seq

object PilarAndroidSymbolResolverModule extends PipelineModule {
  def title = "Pilar Symbol Resolver for Android"
  def origin = classOf[PilarAndroidSymbolResolver]

  val globalParallelKey = "Global.parallel"
  val globalAndroidLibInfoTablesOptKey = "Global.androidLibInfoTablesOpt"
  val globalHasExistingAndroidLibInfoTablesKey = "Global.hasExistingAndroidLibInfoTables"
  val globalBuildLibInfoTablesOnlyKey = "Global.buildLibInfoTablesOnly"
  val globalModelsKey = "Global.models"
  val globalShouldBuildLibInfoTablesKey = "Global.shouldBuildLibInfoTables"
  val globalSymbolTableKey = "Global.symbolTable"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.PilarAndroidSymbolResolverModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if(!(job ? PilarAndroidSymbolResolverModule.globalShouldBuildLibInfoTablesKey)) {
      val shouldBuildLibInfoTables = Class.forName("org.sireum.amandroid.module.PilarAndroidSymbolResolver").getDeclaredMethod("$lessinit$greater$default$4").invoke(null).asInstanceOf[scala.Boolean]
      setShouldBuildLibInfoTables(job.propertyMap, shouldBuildLibInfoTables)
    }

    if(!(job ? PilarAndroidSymbolResolverModule.globalBuildLibInfoTablesOnlyKey)) {
      val buildLibInfoTablesOnly = Class.forName("org.sireum.amandroid.module.PilarAndroidSymbolResolver").getDeclaredMethod("$lessinit$greater$default$5").invoke(null).asInstanceOf[scala.Boolean]
      setBuildLibInfoTablesOnly(job.propertyMap, buildLibInfoTablesOnly)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _parallel : scala.Option[AnyRef] = None
    var _parallelKey : scala.Option[String] = None

    val keylistparallel = List(PilarAndroidSymbolResolverModule.globalParallelKey)
    keylistparallel.foreach(key => 
      if(job ? key) { 
        if(_parallel.isEmpty) {
          _parallel = Some(job(key))
          _parallelKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _parallel.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'parallel' keys '" + _parallelKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _parallel match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'parallel'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'parallel'")       
    }
    var _hasExistingAndroidLibInfoTables : scala.Option[AnyRef] = None
    var _hasExistingAndroidLibInfoTablesKey : scala.Option[String] = None

    val keylisthasExistingAndroidLibInfoTables = List(PilarAndroidSymbolResolverModule.globalHasExistingAndroidLibInfoTablesKey)
    keylisthasExistingAndroidLibInfoTables.foreach(key => 
      if(job ? key) { 
        if(_hasExistingAndroidLibInfoTables.isEmpty) {
          _hasExistingAndroidLibInfoTables = Some(job(key))
          _hasExistingAndroidLibInfoTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _hasExistingAndroidLibInfoTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'hasExistingAndroidLibInfoTables' keys '" + _hasExistingAndroidLibInfoTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _hasExistingAndroidLibInfoTables match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'hasExistingAndroidLibInfoTables'.  Expecting 'scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'hasExistingAndroidLibInfoTables'")       
    }
    var _shouldBuildLibInfoTables : scala.Option[AnyRef] = None
    var _shouldBuildLibInfoTablesKey : scala.Option[String] = None

    val keylistshouldBuildLibInfoTables = List(PilarAndroidSymbolResolverModule.globalShouldBuildLibInfoTablesKey)
    keylistshouldBuildLibInfoTables.foreach(key => 
      if(job ? key) { 
        if(_shouldBuildLibInfoTables.isEmpty) {
          _shouldBuildLibInfoTables = Some(job(key))
          _shouldBuildLibInfoTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _shouldBuildLibInfoTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'shouldBuildLibInfoTables' keys '" + _shouldBuildLibInfoTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _shouldBuildLibInfoTables match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'shouldBuildLibInfoTables'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'shouldBuildLibInfoTables'")       
    }
    var _buildLibInfoTablesOnly : scala.Option[AnyRef] = None
    var _buildLibInfoTablesOnlyKey : scala.Option[String] = None

    val keylistbuildLibInfoTablesOnly = List(PilarAndroidSymbolResolverModule.globalBuildLibInfoTablesOnlyKey)
    keylistbuildLibInfoTablesOnly.foreach(key => 
      if(job ? key) { 
        if(_buildLibInfoTablesOnly.isEmpty) {
          _buildLibInfoTablesOnly = Some(job(key))
          _buildLibInfoTablesOnlyKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _buildLibInfoTablesOnly.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'buildLibInfoTablesOnly' keys '" + _buildLibInfoTablesOnlyKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _buildLibInfoTablesOnly match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Boolean]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'buildLibInfoTablesOnly'.  Expecting 'scala.Boolean' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'buildLibInfoTablesOnly'")       
    }
    var _models : scala.Option[AnyRef] = None
    var _modelsKey : scala.Option[String] = None

    val keylistmodels = List(PilarAndroidSymbolResolverModule.globalModelsKey)
    keylistmodels.foreach(key => 
      if(job ? key) { 
        if(_models.isEmpty) {
          _models = Some(job(key))
          _modelsKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _models.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'models' keys '" + _modelsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _models match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'models'.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'models'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'androidLibInfoTablesOpt'. Expecting (PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey)") 
    }

    if(job ? PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey && !job(PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey).isInstanceOf[scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey.  Expecting 'scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]' but found '" + 
        job(PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey).getClass.toString + "'")
    } 

    if(!(job ? PilarAndroidSymbolResolverModule.globalSymbolTableKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'symbolTable'. Expecting (PilarAndroidSymbolResolverModule.globalSymbolTableKey)") 
    }

    if(job ? PilarAndroidSymbolResolverModule.globalSymbolTableKey && !job(PilarAndroidSymbolResolverModule.globalSymbolTableKey).isInstanceOf[org.sireum.pilar.symbol.SymbolTable]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for PilarAndroidSymbolResolverModule.globalSymbolTableKey.  Expecting 'org.sireum.pilar.symbol.SymbolTable' but found '" + 
        job(PilarAndroidSymbolResolverModule.globalSymbolTableKey).getClass.toString + "'")
    } 
    return tags
  }

  def getParallel (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalParallelKey)) {
       return options(PilarAndroidSymbolResolverModule.globalParallelKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setParallel (options : MMap[Property.Key, Any], parallel : scala.Boolean) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalParallelKey) = parallel

    return options
  }

  def getHasExistingAndroidLibInfoTables (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalHasExistingAndroidLibInfoTablesKey)) {
       return options(PilarAndroidSymbolResolverModule.globalHasExistingAndroidLibInfoTablesKey).asInstanceOf[scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setHasExistingAndroidLibInfoTables (options : MMap[Property.Key, Any], hasExistingAndroidLibInfoTables : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalHasExistingAndroidLibInfoTablesKey) = hasExistingAndroidLibInfoTables

    return options
  }

  def getShouldBuildLibInfoTables (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalShouldBuildLibInfoTablesKey)) {
       return options(PilarAndroidSymbolResolverModule.globalShouldBuildLibInfoTablesKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setShouldBuildLibInfoTables (options : MMap[Property.Key, Any], shouldBuildLibInfoTables : scala.Boolean) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalShouldBuildLibInfoTablesKey) = shouldBuildLibInfoTables

    return options
  }

  def getBuildLibInfoTablesOnly (options : scala.collection.Map[Property.Key, Any]) : scala.Boolean = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalBuildLibInfoTablesOnlyKey)) {
       return options(PilarAndroidSymbolResolverModule.globalBuildLibInfoTablesOnlyKey).asInstanceOf[scala.Boolean]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setBuildLibInfoTablesOnly (options : MMap[Property.Key, Any], buildLibInfoTablesOnly : scala.Boolean) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalBuildLibInfoTablesOnlyKey) = buildLibInfoTablesOnly

    return options
  }

  def getModels (options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalModelsKey)) {
       return options(PilarAndroidSymbolResolverModule.globalModelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setModels (options : MMap[Property.Key, Any], models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalModelsKey) = models

    return options
  }

  def getAndroidLibInfoTablesOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey)) {
       return options(PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey).asInstanceOf[scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidLibInfoTablesOpt (options : MMap[Property.Key, Any], androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalAndroidLibInfoTablesOptKey) = androidLibInfoTablesOpt

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.SymbolTable = {
    if (options.contains(PilarAndroidSymbolResolverModule.globalSymbolTableKey)) {
       return options(PilarAndroidSymbolResolverModule.globalSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.SymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.pilar.symbol.SymbolTable) : MMap[Property.Key, Any] = {

    options(PilarAndroidSymbolResolverModule.globalSymbolTableKey) = symbolTable

    return options
  }

  object ConsumerView {
    implicit class PilarAndroidSymbolResolverModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def parallel : scala.Boolean = PilarAndroidSymbolResolverModule.getParallel(job.propertyMap)
      def hasExistingAndroidLibInfoTables : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = PilarAndroidSymbolResolverModule.getHasExistingAndroidLibInfoTables(job.propertyMap)
      def shouldBuildLibInfoTables : scala.Boolean = PilarAndroidSymbolResolverModule.getShouldBuildLibInfoTables(job.propertyMap)
      def buildLibInfoTablesOnly : scala.Boolean = PilarAndroidSymbolResolverModule.getBuildLibInfoTablesOnly(job.propertyMap)
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = PilarAndroidSymbolResolverModule.getModels(job.propertyMap)
      def androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = PilarAndroidSymbolResolverModule.getAndroidLibInfoTablesOpt(job.propertyMap)
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = PilarAndroidSymbolResolverModule.getSymbolTable(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class PilarAndroidSymbolResolverModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def parallel_=(parallel : scala.Boolean) { PilarAndroidSymbolResolverModule.setParallel(job.propertyMap, parallel) }
      def parallel : scala.Boolean = PilarAndroidSymbolResolverModule.getParallel(job.propertyMap)

      def hasExistingAndroidLibInfoTables_=(hasExistingAndroidLibInfoTables : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) { PilarAndroidSymbolResolverModule.setHasExistingAndroidLibInfoTables(job.propertyMap, hasExistingAndroidLibInfoTables) }
      def hasExistingAndroidLibInfoTables : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = PilarAndroidSymbolResolverModule.getHasExistingAndroidLibInfoTables(job.propertyMap)

      def shouldBuildLibInfoTables_=(shouldBuildLibInfoTables : scala.Boolean) { PilarAndroidSymbolResolverModule.setShouldBuildLibInfoTables(job.propertyMap, shouldBuildLibInfoTables) }
      def shouldBuildLibInfoTables : scala.Boolean = PilarAndroidSymbolResolverModule.getShouldBuildLibInfoTables(job.propertyMap)

      def buildLibInfoTablesOnly_=(buildLibInfoTablesOnly : scala.Boolean) { PilarAndroidSymbolResolverModule.setBuildLibInfoTablesOnly(job.propertyMap, buildLibInfoTablesOnly) }
      def buildLibInfoTablesOnly : scala.Boolean = PilarAndroidSymbolResolverModule.getBuildLibInfoTablesOnly(job.propertyMap)

      def models_=(models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) { PilarAndroidSymbolResolverModule.setModels(job.propertyMap, models) }
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = PilarAndroidSymbolResolverModule.getModels(job.propertyMap)

      def androidLibInfoTablesOpt_=(androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) { PilarAndroidSymbolResolverModule.setAndroidLibInfoTablesOpt(job.propertyMap, androidLibInfoTablesOpt) }
      def androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = PilarAndroidSymbolResolverModule.getAndroidLibInfoTablesOpt(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { PilarAndroidSymbolResolverModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = PilarAndroidSymbolResolverModule.getSymbolTable(job.propertyMap)
    }
  }
}

trait PilarAndroidSymbolResolverModule {
  def job : PipelineJob

  def parallel : scala.Boolean = PilarAndroidSymbolResolverModule.getParallel(job.propertyMap)

  def hasExistingAndroidLibInfoTables : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = PilarAndroidSymbolResolverModule.getHasExistingAndroidLibInfoTables(job.propertyMap)

  def shouldBuildLibInfoTables : scala.Boolean = PilarAndroidSymbolResolverModule.getShouldBuildLibInfoTables(job.propertyMap)

  def buildLibInfoTablesOnly : scala.Boolean = PilarAndroidSymbolResolverModule.getBuildLibInfoTablesOnly(job.propertyMap)

  def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = PilarAndroidSymbolResolverModule.getModels(job.propertyMap)


  def androidLibInfoTablesOpt_=(androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]) { PilarAndroidSymbolResolverModule.setAndroidLibInfoTablesOpt(job.propertyMap, androidLibInfoTablesOpt) }
  def androidLibInfoTablesOpt : scala.Option[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables] = PilarAndroidSymbolResolverModule.getAndroidLibInfoTablesOpt(job.propertyMap)


  def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { PilarAndroidSymbolResolverModule.setSymbolTable(job.propertyMap, symbolTable) }
  def symbolTable : org.sireum.pilar.symbol.SymbolTable = PilarAndroidSymbolResolverModule.getSymbolTable(job.propertyMap)
}