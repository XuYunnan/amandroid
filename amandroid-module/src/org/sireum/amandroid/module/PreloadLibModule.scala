// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.PreloadLib
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import scala.collection.immutable.Map

object PreloadLibModule extends PipelineModule {
  def title = "Preload Library Module"
  def origin = classOf[PreloadLib]

  val procedureMapKey = "PreloadLib.procedureMap"
  val globalLibFileDirKey = "Global.libFileDir"
  val globalProcedureMapKey = "Global.procedureMap"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.PreloadLibModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _libFileDir : scala.Option[AnyRef] = None
    var _libFileDirKey : scala.Option[String] = None

    val keylistlibFileDir = List(PreloadLibModule.globalLibFileDirKey)
    keylistlibFileDir.foreach(key => 
      if(job ? key) { 
        if(_libFileDir.isEmpty) {
          _libFileDir = Some(job(key))
          _libFileDirKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _libFileDir.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'libFileDir' keys '" + _libFileDirKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _libFileDir match{
      case Some(x) =>
        if(!x.isInstanceOf[java.lang.String]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'libFileDir'.  Expecting 'java.lang.String' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'libFileDir'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? PreloadLibModule.procedureMapKey) && !(job ? PreloadLibModule.globalProcedureMapKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'procedureMap'. Expecting (PreloadLibModule.procedureMapKey or PreloadLibModule.globalProcedureMapKey)") 
    }

    if(job ? PreloadLibModule.procedureMapKey && !job(PreloadLibModule.procedureMapKey).isInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for PreloadLibModule.procedureMapKey.  Expecting 'scala.collection.immutable.Map[java.lang.String, java.lang.String]' but found '" + 
        job(PreloadLibModule.procedureMapKey).getClass.toString + "'")
    } 

    if(job ? PreloadLibModule.globalProcedureMapKey && !job(PreloadLibModule.globalProcedureMapKey).isInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for PreloadLibModule.globalProcedureMapKey.  Expecting 'scala.collection.immutable.Map[java.lang.String, java.lang.String]' but found '" + 
        job(PreloadLibModule.globalProcedureMapKey).getClass.toString + "'")
    } 
    return tags
  }

  def getLibFileDir (options : scala.collection.Map[Property.Key, Any]) : java.lang.String = {
    if (options.contains(PreloadLibModule.globalLibFileDirKey)) {
       return options(PreloadLibModule.globalLibFileDirKey).asInstanceOf[java.lang.String]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setLibFileDir (options : MMap[Property.Key, Any], libFileDir : java.lang.String) : MMap[Property.Key, Any] = {

    options(PreloadLibModule.globalLibFileDirKey) = libFileDir

    return options
  }

  def getProcedureMap (options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Map[java.lang.String, java.lang.String] = {
    if (options.contains(PreloadLibModule.globalProcedureMapKey)) {
       return options(PreloadLibModule.globalProcedureMapKey).asInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]
    }
    if (options.contains(PreloadLibModule.procedureMapKey)) {
       return options(PreloadLibModule.procedureMapKey).asInstanceOf[scala.collection.immutable.Map[java.lang.String, java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureMap (options : MMap[Property.Key, Any], procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String]) : MMap[Property.Key, Any] = {

    options(PreloadLibModule.globalProcedureMapKey) = procedureMap
    options(procedureMapKey) = procedureMap

    return options
  }

  object ConsumerView {
    implicit class PreloadLibModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def libFileDir : java.lang.String = PreloadLibModule.getLibFileDir(job.propertyMap)
      def procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String] = PreloadLibModule.getProcedureMap(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class PreloadLibModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def libFileDir_=(libFileDir : java.lang.String) { PreloadLibModule.setLibFileDir(job.propertyMap, libFileDir) }
      def libFileDir : java.lang.String = PreloadLibModule.getLibFileDir(job.propertyMap)

      def procedureMap_=(procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String]) { PreloadLibModule.setProcedureMap(job.propertyMap, procedureMap) }
      def procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String] = PreloadLibModule.getProcedureMap(job.propertyMap)
    }
  }
}

trait PreloadLibModule {
  def job : PipelineJob

  def libFileDir : java.lang.String = PreloadLibModule.getLibFileDir(job.propertyMap)


  def procedureMap_=(procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String]) { PreloadLibModule.setProcedureMap(job.propertyMap, procedureMap) }
  def procedureMap : scala.collection.immutable.Map[java.lang.String, java.lang.String] = PreloadLibModule.getProcedureMap(job.propertyMap)
}