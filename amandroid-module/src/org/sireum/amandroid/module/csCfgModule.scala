// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.csCfg
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.alir.AlirIntraProceduralNode
import org.sireum.alir.ControlFlowGraph
import org.sireum.alir.DefRef
import org.sireum.alir.MonotoneDataFlowAnalysisResult
import org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables
import org.sireum.amandroid.cache.AndroidCacheFile
import org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult
import org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.amandroid.scfg.CompressedControlFlowGraph
import org.sireum.amandroid.scfg.SystemControlFlowGraph
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Function1
import scala.Function2
import scala.Option
import scala.collection.Seq
import scala.collection.mutable.Map

object csCfgModule extends PipelineModule {
  def title = "Compressed System Control Flow Graph Builder"
  def origin = classOf[csCfg]

  val globalAndroidVirtualMethodTablesKey = "Global.androidVirtualMethodTables"
  val globalCsCfgKey = "Global.csCfg"
  val globalAndroidCacheKey = "Global.androidCache"
  val globalAPIpermKey = "Global.APIperm"
  val csCfgKey = "csCfg.csCfg"
  val globalSCfgKey = "Global.sCfg"
  val globalCCfgsKey = "Global.cCfgs"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.csCfgModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _sCfg : scala.Option[AnyRef] = None
    var _sCfgKey : scala.Option[String] = None

    val keylistsCfg = List(csCfgModule.globalSCfgKey)
    keylistsCfg.foreach(key => 
      if(job ? key) { 
        if(_sCfg.isEmpty) {
          _sCfg = Some(job(key))
          _sCfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _sCfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'sCfg' keys '" + _sCfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _sCfg match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'sCfg'.  Expecting 'org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'sCfg'")       
    }
    var _cCfgs : scala.Option[AnyRef] = None
    var _cCfgsKey : scala.Option[String] = None

    val keylistcCfgs = List(csCfgModule.globalCCfgsKey)
    keylistcCfgs.foreach(key => 
      if(job ? key) { 
        if(_cCfgs.isEmpty) {
          _cCfgs = Some(job(key))
          _cCfgsKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _cCfgs.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'cCfgs' keys '" + _cCfgsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _cCfgs match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'cCfgs'.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'cCfgs'")       
    }
    var _APIperm : scala.Option[AnyRef] = None
    var _APIpermKey : scala.Option[String] = None

    val keylistAPIperm = List(csCfgModule.globalAPIpermKey)
    keylistAPIperm.foreach(key => 
      if(job ? key) { 
        if(_APIperm.isEmpty) {
          _APIperm = Some(job(key))
          _APIpermKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _APIperm.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'APIperm' keys '" + _APIpermKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _APIperm match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'APIperm'.  Expecting 'scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'APIperm'")       
    }
    var _androidVirtualMethodTables : scala.Option[AnyRef] = None
    var _androidVirtualMethodTablesKey : scala.Option[String] = None

    val keylistandroidVirtualMethodTables = List(csCfgModule.globalAndroidVirtualMethodTablesKey)
    keylistandroidVirtualMethodTables.foreach(key => 
      if(job ? key) { 
        if(_androidVirtualMethodTables.isEmpty) {
          _androidVirtualMethodTables = Some(job(key))
          _androidVirtualMethodTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidVirtualMethodTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidVirtualMethodTables' keys '" + _androidVirtualMethodTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidVirtualMethodTables match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidVirtualMethodTables'.  Expecting 'org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidVirtualMethodTables'")       
    }
    var _androidCache : scala.Option[AnyRef] = None
    var _androidCacheKey : scala.Option[String] = None

    val keylistandroidCache = List(csCfgModule.globalAndroidCacheKey)
    keylistandroidCache.foreach(key => 
      if(job ? key) { 
        if(_androidCache.isEmpty) {
          _androidCache = Some(job(key))
          _androidCacheKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidCache.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidCache' keys '" + _androidCacheKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidCache match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidCache'.  Expecting 'org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidCache'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? csCfgModule.csCfgKey) && !(job ? csCfgModule.globalCsCfgKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'csCfg'. Expecting (csCfgModule.csCfgKey or csCfgModule.globalCsCfgKey)") 
    }

    if(job ? csCfgModule.csCfgKey && !job(csCfgModule.csCfgKey).isInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for csCfgModule.csCfgKey.  Expecting 'org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]' but found '" + 
        job(csCfgModule.csCfgKey).getClass.toString + "'")
    } 

    if(job ? csCfgModule.globalCsCfgKey && !job(csCfgModule.globalCsCfgKey).isInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for csCfgModule.globalCsCfgKey.  Expecting 'org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]' but found '" + 
        job(csCfgModule.globalCsCfgKey).getClass.toString + "'")
    } 
    return tags
  }

  def getSCfg (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = {
    if (options.contains(csCfgModule.globalSCfgKey)) {
       return options(csCfgModule.globalSCfgKey).asInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSCfg (options : MMap[Property.Key, Any], sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(csCfgModule.globalSCfgKey) = sCfg

    return options
  }

  def getCCfgs (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = {
    if (options.contains(csCfgModule.globalCCfgsKey)) {
       return options(csCfgModule.globalCCfgsKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCCfgs (options : MMap[Property.Key, Any], cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(csCfgModule.globalCCfgsKey) = cCfgs

    return options
  }

  def getAPIperm (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]] = {
    if (options.contains(csCfgModule.globalAPIpermKey)) {
       return options(csCfgModule.globalAPIpermKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAPIperm (options : MMap[Property.Key, Any], APIperm : scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(csCfgModule.globalAPIpermKey) = APIperm

    return options
  }

  def getAndroidVirtualMethodTables (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = {
    if (options.contains(csCfgModule.globalAndroidVirtualMethodTablesKey)) {
       return options(csCfgModule.globalAndroidVirtualMethodTablesKey).asInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidVirtualMethodTables (options : MMap[Property.Key, Any], androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables) : MMap[Property.Key, Any] = {

    options(csCfgModule.globalAndroidVirtualMethodTablesKey) = androidVirtualMethodTables

    return options
  }

  def getAndroidCache (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = {
    if (options.contains(csCfgModule.globalAndroidCacheKey)) {
       return options(csCfgModule.globalAndroidCacheKey).asInstanceOf[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidCache (options : MMap[Property.Key, Any], androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]) : MMap[Property.Key, Any] = {

    options(csCfgModule.globalAndroidCacheKey) = androidCache

    return options
  }

  def getCsCfg (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = {
    if (options.contains(csCfgModule.globalCsCfgKey)) {
       return options(csCfgModule.globalCsCfgKey).asInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]
    }
    if (options.contains(csCfgModule.csCfgKey)) {
       return options(csCfgModule.csCfgKey).asInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCsCfg (options : MMap[Property.Key, Any], csCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(csCfgModule.globalCsCfgKey) = csCfg
    options(csCfgKey) = csCfg

    return options
  }

  object ConsumerView {
    implicit class csCfgModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = csCfgModule.getSCfg(job.propertyMap)
      def cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = csCfgModule.getCCfgs(job.propertyMap)
      def APIperm : scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]] = csCfgModule.getAPIperm(job.propertyMap)
      def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = csCfgModule.getAndroidVirtualMethodTables(job.propertyMap)
      def androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = csCfgModule.getAndroidCache(job.propertyMap)
      def csCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = csCfgModule.getCsCfg(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class csCfgModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def sCfg_=(sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) { csCfgModule.setSCfg(job.propertyMap, sCfg) }
      def sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = csCfgModule.getSCfg(job.propertyMap)

      def cCfgs_=(cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) { csCfgModule.setCCfgs(job.propertyMap, cCfgs) }
      def cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = csCfgModule.getCCfgs(job.propertyMap)

      def APIperm_=(APIperm : scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]]) { csCfgModule.setAPIperm(job.propertyMap, APIperm) }
      def APIperm : scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]] = csCfgModule.getAPIperm(job.propertyMap)

      def androidVirtualMethodTables_=(androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables) { csCfgModule.setAndroidVirtualMethodTables(job.propertyMap, androidVirtualMethodTables) }
      def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = csCfgModule.getAndroidVirtualMethodTables(job.propertyMap)

      def androidCache_=(androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]) { csCfgModule.setAndroidCache(job.propertyMap, androidCache) }
      def androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = csCfgModule.getAndroidCache(job.propertyMap)

      def csCfg_=(csCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) { csCfgModule.setCsCfg(job.propertyMap, csCfg) }
      def csCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = csCfgModule.getCsCfg(job.propertyMap)
    }
  }
}

trait csCfgModule {
  def job : PipelineJob

  def sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = csCfgModule.getSCfg(job.propertyMap)

  def cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = csCfgModule.getCCfgs(job.propertyMap)

  def APIperm : scala.collection.mutable.Map[java.lang.String, scala.collection.mutable.ListBuffer[java.lang.String]] = csCfgModule.getAPIperm(job.propertyMap)

  def androidVirtualMethodTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidVirtualMethodTables = csCfgModule.getAndroidVirtualMethodTables(job.propertyMap)

  def androidCache : org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String] = csCfgModule.getAndroidCache(job.propertyMap)


  def csCfg_=(csCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) { csCfgModule.setCsCfg(job.propertyMap, csCfg) }
  def csCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = csCfgModule.getCsCfg(job.propertyMap)
}