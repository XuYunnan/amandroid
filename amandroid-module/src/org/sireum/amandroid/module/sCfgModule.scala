// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.sCfg
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.alir.AlirIntraProceduralNode
import org.sireum.alir.ControlFlowGraph
import org.sireum.alir.DefRef
import org.sireum.alir.MonotoneDataFlowAnalysisResult
import org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables
import org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidInterAnalysisResult
import org.sireum.amandroid.module.AndroidInterIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.amandroid.objectflowanalysis.ObjectFlowGraph
import org.sireum.amandroid.objectflowanalysis.OfaNode
import org.sireum.amandroid.scfg.CompressedControlFlowGraph
import org.sireum.amandroid.scfg.SystemControlFlowGraph
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Function1
import scala.Function2
import scala.Option
import scala.collection.Seq
import scala.collection.mutable.Map

object sCfgModule extends PipelineModule {
  def title = "System Control Flow Graph Builder"
  def origin = classOf[sCfg]

  val globalAndroidCacheKey = "Global.androidCache"
  val globalAndroidLibInfoTablesKey = "Global.androidLibInfoTables"
  val globalSCfgKey = "Global.sCfg"
  val sCfgKey = "sCfg.sCfg"
  val globalCCfgsKey = "Global.cCfgs"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.sCfgModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
    if(!(job ? sCfgModule.globalAndroidCacheKey)) {
      val androidCache = Class.forName("org.sireum.amandroid.module.sCfg").getDeclaredMethod("$lessinit$greater$default$2").invoke(null).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
      setAndroidCache(job.propertyMap, androidCache)
    }
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _androidCache : scala.Option[AnyRef] = None
    var _androidCacheKey : scala.Option[String] = None

    val keylistandroidCache = List(sCfgModule.globalAndroidCacheKey)
    keylistandroidCache.foreach(key => 
      if(job ? key) { 
        if(_androidCache.isEmpty) {
          _androidCache = Some(job(key))
          _androidCacheKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidCache.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidCache' keys '" + _androidCacheKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidCache match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidCache'.  Expecting 'scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidCache'")       
    }
    var _androidLibInfoTables : scala.Option[AnyRef] = None
    var _androidLibInfoTablesKey : scala.Option[String] = None

    val keylistandroidLibInfoTables = List(sCfgModule.globalAndroidLibInfoTablesKey)
    keylistandroidLibInfoTables.foreach(key => 
      if(job ? key) { 
        if(_androidLibInfoTables.isEmpty) {
          _androidLibInfoTables = Some(job(key))
          _androidLibInfoTablesKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _androidLibInfoTables.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'androidLibInfoTables' keys '" + _androidLibInfoTablesKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _androidLibInfoTables match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'androidLibInfoTables'.  Expecting 'org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'androidLibInfoTables'")       
    }
    var _cCfgs : scala.Option[AnyRef] = None
    var _cCfgsKey : scala.Option[String] = None

    val keylistcCfgs = List(sCfgModule.globalCCfgsKey)
    keylistcCfgs.foreach(key => 
      if(job ? key) { 
        if(_cCfgs.isEmpty) {
          _cCfgs = Some(job(key))
          _cCfgsKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _cCfgs.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'cCfgs' keys '" + _cCfgsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _cCfgs match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'cCfgs'.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'cCfgs'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? sCfgModule.sCfgKey) && !(job ? sCfgModule.globalSCfgKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'sCfg'. Expecting (sCfgModule.sCfgKey or sCfgModule.globalSCfgKey)") 
    }

    if(job ? sCfgModule.sCfgKey && !job(sCfgModule.sCfgKey).isInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for sCfgModule.sCfgKey.  Expecting 'org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]' but found '" + 
        job(sCfgModule.sCfgKey).getClass.toString + "'")
    } 

    if(job ? sCfgModule.globalSCfgKey && !job(sCfgModule.globalSCfgKey).isInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for sCfgModule.globalSCfgKey.  Expecting 'org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]' but found '" + 
        job(sCfgModule.globalSCfgKey).getClass.toString + "'")
    } 
    return tags
  }

  def getAndroidCache (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = {
    if (options.contains(sCfgModule.globalAndroidCacheKey)) {
       return options(sCfgModule.globalAndroidCacheKey).asInstanceOf[scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidCache (options : MMap[Property.Key, Any], androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(sCfgModule.globalAndroidCacheKey) = androidCache

    return options
  }

  def getAndroidLibInfoTables (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = {
    if (options.contains(sCfgModule.globalAndroidLibInfoTablesKey)) {
       return options(sCfgModule.globalAndroidLibInfoTablesKey).asInstanceOf[org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAndroidLibInfoTables (options : MMap[Property.Key, Any], androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables) : MMap[Property.Key, Any] = {

    options(sCfgModule.globalAndroidLibInfoTablesKey) = androidLibInfoTables

    return options
  }

  def getSCfg (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = {
    if (options.contains(sCfgModule.globalSCfgKey)) {
       return options(sCfgModule.globalSCfgKey).asInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]
    }
    if (options.contains(sCfgModule.sCfgKey)) {
       return options(sCfgModule.sCfgKey).asInstanceOf[org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSCfg (options : MMap[Property.Key, Any], sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(sCfgModule.globalSCfgKey) = sCfg
    options(sCfgKey) = sCfg

    return options
  }

  def getCCfgs (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = {
    if (options.contains(sCfgModule.globalCCfgsKey)) {
       return options(sCfgModule.globalCCfgsKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCCfgs (options : MMap[Property.Key, Any], cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) : MMap[Property.Key, Any] = {

    options(sCfgModule.globalCCfgsKey) = cCfgs

    return options
  }

  object ConsumerView {
    implicit class sCfgModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = sCfgModule.getAndroidCache(job.propertyMap)
      def androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = sCfgModule.getAndroidLibInfoTables(job.propertyMap)
      def sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = sCfgModule.getSCfg(job.propertyMap)
      def cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = sCfgModule.getCCfgs(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class sCfgModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def androidCache_=(androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]]) { sCfgModule.setAndroidCache(job.propertyMap, androidCache) }
      def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = sCfgModule.getAndroidCache(job.propertyMap)

      def androidLibInfoTables_=(androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables) { sCfgModule.setAndroidLibInfoTables(job.propertyMap, androidLibInfoTables) }
      def androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = sCfgModule.getAndroidLibInfoTables(job.propertyMap)

      def sCfg_=(sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) { sCfgModule.setSCfg(job.propertyMap, sCfg) }
      def sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = sCfgModule.getSCfg(job.propertyMap)

      def cCfgs_=(cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]]) { sCfgModule.setCCfgs(job.propertyMap, cCfgs) }
      def cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = sCfgModule.getCCfgs(job.propertyMap)
    }
  }
}

trait sCfgModule {
  def job : PipelineJob

  def androidCache : scala.Option[org.sireum.amandroid.cache.AndroidCacheFile[java.lang.String]] = sCfgModule.getAndroidCache(job.propertyMap)

  def androidLibInfoTables : org.sireum.amandroid.AndroidSymbolResolver.AndroidLibInfoTables = sCfgModule.getAndroidLibInfoTables(job.propertyMap)


  def sCfg_=(sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String]) { sCfgModule.setSCfg(job.propertyMap, sCfg) }
  def sCfg : org.sireum.amandroid.scfg.SystemControlFlowGraph[java.lang.String] = sCfgModule.getSCfg(job.propertyMap)

  def cCfgs : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.scfg.CompressedControlFlowGraph[java.lang.String]] = sCfgModule.getCCfgs(job.propertyMap)
}