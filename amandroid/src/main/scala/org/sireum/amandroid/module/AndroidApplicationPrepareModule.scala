// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.AndroidApplicationPrepare
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.amandroid.android.appInfo.AppInfoCollector
import org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.pilar.symbol.SymbolTable
import scala.Option
import scala.collection.mutable.Map

object AndroidApplicationPrepareModule extends PipelineModule {
  def title = "Android Application Preparation Module"
  def origin = classOf[AndroidApplicationPrepare]

  val globalAppInfoOptKey = "Global.appInfoOpt"
  val appInfoOptKey = "AndroidApplicationPrepare.appInfoOpt"
  val globalIntraResultKey = "Global.intraResult"
  val globalApkFileLocationKey = "Global.apkFileLocation"
  val globalSymbolTableKey = "Global.symbolTable"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.AndroidApplicationPrepareModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _apkFileLocation : scala.Option[AnyRef] = None
    var _apkFileLocationKey : scala.Option[String] = None

    val keylistapkFileLocation = List(AndroidApplicationPrepareModule.globalApkFileLocationKey)
    keylistapkFileLocation.foreach(key => 
      if(job ? key) { 
        if(_apkFileLocation.isEmpty) {
          _apkFileLocation = Some(job(key))
          _apkFileLocationKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _apkFileLocation.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'apkFileLocation' keys '" + _apkFileLocationKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _apkFileLocation match{
      case Some(x) =>
        if(!x.isInstanceOf[java.lang.String]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'apkFileLocation'.  Expecting 'java.lang.String' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'apkFileLocation'")       
    }
    var _intraResult : scala.Option[AnyRef] = None
    var _intraResultKey : scala.Option[String] = None

    val keylistintraResult = List(AndroidApplicationPrepareModule.globalIntraResultKey)
    keylistintraResult.foreach(key => 
      if(job ? key) { 
        if(_intraResult.isEmpty) {
          _intraResult = Some(job(key))
          _intraResultKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _intraResult.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'intraResult' keys '" + _intraResultKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _intraResult match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'intraResult'.  Expecting 'scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'intraResult'")       
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(AndroidApplicationPrepareModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key => 
      if(job ? key) { 
        if(_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.pilar.symbol.SymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.pilar.symbol.SymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? AndroidApplicationPrepareModule.appInfoOptKey) && !(job ? AndroidApplicationPrepareModule.globalAppInfoOptKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'appInfoOpt'. Expecting (AndroidApplicationPrepareModule.appInfoOptKey or AndroidApplicationPrepareModule.globalAppInfoOptKey)") 
    }

    if(job ? AndroidApplicationPrepareModule.appInfoOptKey && !job(AndroidApplicationPrepareModule.appInfoOptKey).isInstanceOf[scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidApplicationPrepareModule.appInfoOptKey.  Expecting 'scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]' but found '" + 
        job(AndroidApplicationPrepareModule.appInfoOptKey).getClass.toString + "'")
    } 

    if(job ? AndroidApplicationPrepareModule.globalAppInfoOptKey && !job(AndroidApplicationPrepareModule.globalAppInfoOptKey).isInstanceOf[scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for AndroidApplicationPrepareModule.globalAppInfoOptKey.  Expecting 'scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]' but found '" + 
        job(AndroidApplicationPrepareModule.globalAppInfoOptKey).getClass.toString + "'")
    } 
    return tags
  }

  def getApkFileLocation (options : scala.collection.Map[Property.Key, Any]) : java.lang.String = {
    if (options.contains(AndroidApplicationPrepareModule.globalApkFileLocationKey)) {
       return options(AndroidApplicationPrepareModule.globalApkFileLocationKey).asInstanceOf[java.lang.String]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setApkFileLocation (options : MMap[Property.Key, Any], apkFileLocation : java.lang.String) : MMap[Property.Key, Any] = {

    options(AndroidApplicationPrepareModule.globalApkFileLocationKey) = apkFileLocation

    return options
  }

  def getIntraResult (options : scala.collection.Map[Property.Key, Any]) : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = {
    if (options.contains(AndroidApplicationPrepareModule.globalIntraResultKey)) {
       return options(AndroidApplicationPrepareModule.globalIntraResultKey).asInstanceOf[scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setIntraResult (options : MMap[Property.Key, Any], intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]) : MMap[Property.Key, Any] = {

    options(AndroidApplicationPrepareModule.globalIntraResultKey) = intraResult

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.SymbolTable = {
    if (options.contains(AndroidApplicationPrepareModule.globalSymbolTableKey)) {
       return options(AndroidApplicationPrepareModule.globalSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.SymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.pilar.symbol.SymbolTable) : MMap[Property.Key, Any] = {

    options(AndroidApplicationPrepareModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getAppInfoOpt (options : scala.collection.Map[Property.Key, Any]) : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector] = {
    if (options.contains(AndroidApplicationPrepareModule.globalAppInfoOptKey)) {
       return options(AndroidApplicationPrepareModule.globalAppInfoOptKey).asInstanceOf[scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]]
    }
    if (options.contains(AndroidApplicationPrepareModule.appInfoOptKey)) {
       return options(AndroidApplicationPrepareModule.appInfoOptKey).asInstanceOf[scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setAppInfoOpt (options : MMap[Property.Key, Any], appInfoOpt : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]) : MMap[Property.Key, Any] = {

    options(AndroidApplicationPrepareModule.globalAppInfoOptKey) = appInfoOpt
    options(appInfoOptKey) = appInfoOpt

    return options
  }

  object ConsumerView {
    implicit class AndroidApplicationPrepareModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def apkFileLocation : java.lang.String = AndroidApplicationPrepareModule.getApkFileLocation(job.propertyMap)
      def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = AndroidApplicationPrepareModule.getIntraResult(job.propertyMap)
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidApplicationPrepareModule.getSymbolTable(job.propertyMap)
      def appInfoOpt : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector] = AndroidApplicationPrepareModule.getAppInfoOpt(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class AndroidApplicationPrepareModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def apkFileLocation_=(apkFileLocation : java.lang.String) { AndroidApplicationPrepareModule.setApkFileLocation(job.propertyMap, apkFileLocation) }
      def apkFileLocation : java.lang.String = AndroidApplicationPrepareModule.getApkFileLocation(job.propertyMap)

      def intraResult_=(intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult]) { AndroidApplicationPrepareModule.setIntraResult(job.propertyMap, intraResult) }
      def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = AndroidApplicationPrepareModule.getIntraResult(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.pilar.symbol.SymbolTable) { AndroidApplicationPrepareModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidApplicationPrepareModule.getSymbolTable(job.propertyMap)

      def appInfoOpt_=(appInfoOpt : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]) { AndroidApplicationPrepareModule.setAppInfoOpt(job.propertyMap, appInfoOpt) }
      def appInfoOpt : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector] = AndroidApplicationPrepareModule.getAppInfoOpt(job.propertyMap)
    }
  }
}

trait AndroidApplicationPrepareModule {
  def job : PipelineJob

  def apkFileLocation : java.lang.String = AndroidApplicationPrepareModule.getApkFileLocation(job.propertyMap)

  def intraResult : scala.collection.mutable.Map[java.lang.String, org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult] = AndroidApplicationPrepareModule.getIntraResult(job.propertyMap)

  def symbolTable : org.sireum.pilar.symbol.SymbolTable = AndroidApplicationPrepareModule.getSymbolTable(job.propertyMap)


  def appInfoOpt_=(appInfoOpt : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector]) { AndroidApplicationPrepareModule.setAppInfoOpt(job.propertyMap, appInfoOpt) }
  def appInfoOpt : scala.Option[org.sireum.amandroid.android.appInfo.AppInfoCollector] = AndroidApplicationPrepareModule.getAppInfoOpt(job.propertyMap)
}