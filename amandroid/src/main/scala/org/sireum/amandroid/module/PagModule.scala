// Do not edit this file. It is auto-generated from org.sireum.amandroid.module.Pag
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.amandroid.module

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.alir.AlirIntraProceduralNode
import org.sireum.alir.ControlFlowGraph
import org.sireum.alir.DefRef
import org.sireum.alir.MonotoneDataFlowAnalysisResult
import org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph
import org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode
import org.sireum.amandroid.module.AndroidIntraProcedural.AndroidIntraAnalysisResult
import org.sireum.pilar.ast.LocationDecl
import org.sireum.pilar.symbol.ProcedureSymbolTable
import org.sireum.pilar.symbol.SymbolTable
import scala.Function1
import scala.Function2
import scala.Option
import scala.collection.mutable.Map

object PagModule extends PipelineModule {
  def title = "intra pointer assignment graph Build"
  def origin = classOf[Pag]

  val globalProcedureSymbolTableKey = "Global.procedureSymbolTable"
  val globalRdaKey = "Global.rda"
  val cfgKey = "Pag.cfg"
  val globalPagKey = "Global.pag"
  val rdaKey = "Pag.rda"
  val pagKey = "Pag.pag"
  val globalCfgKey = "Global.cfg"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.amandroid.module.PagModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule](RdaModule, CfgModule)
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _rda : scala.Option[AnyRef] = None
    var _rdaKey : scala.Option[String] = None

    val keylistrda = List(PagModule.globalRdaKey, RdaModule.rdaKey)
    keylistrda.foreach(key => 
      if(job ? key) { 
        if(_rda.isEmpty) {
          _rda = Some(job(key))
          _rdaKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _rda.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'rda' keys '" + _rdaKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _rda match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'rda'.  Expecting 'org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'rda'")       
    }
    var _procedureSymbolTable : scala.Option[AnyRef] = None
    var _procedureSymbolTableKey : scala.Option[String] = None

    val keylistprocedureSymbolTable = List(PagModule.globalProcedureSymbolTableKey)
    keylistprocedureSymbolTable.foreach(key => 
      if(job ? key) { 
        if(_procedureSymbolTable.isEmpty) {
          _procedureSymbolTable = Some(job(key))
          _procedureSymbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _procedureSymbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'procedureSymbolTable' keys '" + _procedureSymbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _procedureSymbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.pilar.symbol.ProcedureSymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'procedureSymbolTable'.  Expecting 'org.sireum.pilar.symbol.ProcedureSymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'procedureSymbolTable'")       
    }
    var _cfg : scala.Option[AnyRef] = None
    var _cfgKey : scala.Option[String] = None

    val keylistcfg = List(PagModule.globalCfgKey, CfgModule.cfgKey)
    keylistcfg.foreach(key => 
      if(job ? key) { 
        if(_cfg.isEmpty) {
          _cfg = Some(job(key))
          _cfgKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _cfg.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'cfg' keys '" + _cfgKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _cfg match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'cfg'.  Expecting 'org.sireum.alir.ControlFlowGraph[java.lang.String]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'cfg'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? PagModule.pagKey) && !(job ? PagModule.globalPagKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'pag'. Expecting (PagModule.pagKey or PagModule.globalPagKey)") 
    }

    if(job ? PagModule.pagKey && !job(PagModule.pagKey).isInstanceOf[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for PagModule.pagKey.  Expecting 'org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]' but found '" + 
        job(PagModule.pagKey).getClass.toString + "'")
    } 

    if(job ? PagModule.globalPagKey && !job(PagModule.globalPagKey).isInstanceOf[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for PagModule.globalPagKey.  Expecting 'org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]' but found '" + 
        job(PagModule.globalPagKey).getClass.toString + "'")
    } 
    return tags
  }

  def getRda (options : scala.collection.Map[Property.Key, Any]) : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = {
    if (options.contains(PagModule.globalRdaKey)) {
       return options(PagModule.globalRdaKey).asInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]
    }
    if (options.contains(PagModule.rdaKey)) {
       return options(PagModule.rdaKey).asInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]
    }
    if (options.contains(RdaModule.rdaKey)) {
       return options(RdaModule.rdaKey).asInstanceOf[org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setRda (options : MMap[Property.Key, Any], rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]) : MMap[Property.Key, Any] = {

    options(PagModule.globalRdaKey) = rda
    options(rdaKey) = rda

    return options
  }

  def getProcedureSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.pilar.symbol.ProcedureSymbolTable = {
    if (options.contains(PagModule.globalProcedureSymbolTableKey)) {
       return options(PagModule.globalProcedureSymbolTableKey).asInstanceOf[org.sireum.pilar.symbol.ProcedureSymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setProcedureSymbolTable (options : MMap[Property.Key, Any], procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable) : MMap[Property.Key, Any] = {

    options(PagModule.globalProcedureSymbolTableKey) = procedureSymbolTable

    return options
  }

  def getCfg (options : scala.collection.Map[Property.Key, Any]) : org.sireum.alir.ControlFlowGraph[java.lang.String] = {
    if (options.contains(PagModule.globalCfgKey)) {
       return options(PagModule.globalCfgKey).asInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]
    }
    if (options.contains(PagModule.cfgKey)) {
       return options(PagModule.cfgKey).asInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]
    }
    if (options.contains(CfgModule.cfgKey)) {
       return options(CfgModule.cfgKey).asInstanceOf[org.sireum.alir.ControlFlowGraph[java.lang.String]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCfg (options : MMap[Property.Key, Any], cfg : org.sireum.alir.ControlFlowGraph[java.lang.String]) : MMap[Property.Key, Any] = {

    options(PagModule.globalCfgKey) = cfg
    options(cfgKey) = cfg

    return options
  }

  def getPag (options : scala.collection.Map[Property.Key, Any]) : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode] = {
    if (options.contains(PagModule.globalPagKey)) {
       return options(PagModule.globalPagKey).asInstanceOf[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]]
    }
    if (options.contains(PagModule.pagKey)) {
       return options(PagModule.pagKey).asInstanceOf[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setPag (options : MMap[Property.Key, Any], pag : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]) : MMap[Property.Key, Any] = {

    options(PagModule.globalPagKey) = pag
    options(pagKey) = pag

    return options
  }

  object ConsumerView {
    implicit class PagModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = PagModule.getRda(job.propertyMap)
      def procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable = PagModule.getProcedureSymbolTable(job.propertyMap)
      def cfg : org.sireum.alir.ControlFlowGraph[java.lang.String] = PagModule.getCfg(job.propertyMap)
      def pag : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode] = PagModule.getPag(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class PagModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def rda_=(rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]]) { PagModule.setRda(job.propertyMap, rda) }
      def rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = PagModule.getRda(job.propertyMap)

      def procedureSymbolTable_=(procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable) { PagModule.setProcedureSymbolTable(job.propertyMap, procedureSymbolTable) }
      def procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable = PagModule.getProcedureSymbolTable(job.propertyMap)

      def cfg_=(cfg : org.sireum.alir.ControlFlowGraph[java.lang.String]) { PagModule.setCfg(job.propertyMap, cfg) }
      def cfg : org.sireum.alir.ControlFlowGraph[java.lang.String] = PagModule.getCfg(job.propertyMap)

      def pag_=(pag : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]) { PagModule.setPag(job.propertyMap, pag) }
      def pag : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode] = PagModule.getPag(job.propertyMap)
    }
  }
}

trait PagModule {
  def job : PipelineJob

  def rda : org.sireum.alir.MonotoneDataFlowAnalysisResult[scala.Tuple2[org.sireum.alir.Slot, org.sireum.alir.DefDesc]] = PagModule.getRda(job.propertyMap)

  def procedureSymbolTable : org.sireum.pilar.symbol.ProcedureSymbolTable = PagModule.getProcedureSymbolTable(job.propertyMap)

  def cfg : org.sireum.alir.ControlFlowGraph[java.lang.String] = PagModule.getCfg(job.propertyMap)


  def pag_=(pag : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode]) { PagModule.setPag(job.propertyMap, pag) }
  def pag : org.sireum.amandroid.intraProcedural.pointsToAnalysis.PointerAssignmentGraph[org.sireum.amandroid.intraProcedural.pointsToAnalysis.PtaNode] = PagModule.getPag(job.propertyMap)
}